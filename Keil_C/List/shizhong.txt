; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: armcc [4d3637]
; commandline armcc [--c99 --list --split_sections --debug -c --asm --interleave -o..\Output\shizhong.o --asm_dir=..\List --list_dir=..\List --cpu=Cortex-M0+ --apcs=interwork -I..\FWLib\SC32F1XXX_Lib\inc -I..\User\HeadFiles -I..\User -I..\Drivers -I..\Apps -I..\CMSIS -DSC32f10xx -D__UVISION_VERSION=536 .\shizhong.c]
                          THUMB
                          AREA ||i.RTC_SetTime||, CODE, READONLY, ALIGN=2
                  RTC_SetTime PROC
;;;37     
;;;38     void RTC_SetTime(uint16_t year,uint16_t mon,uint16_t day,uint16_t hour,uint16_t min)
000000  b530              PUSH     {r4,r5,lr}
;;;39     {
;;;40     	rtc_clock.year=year;
000002  4c02              LDR      r4,|L1.12|
000004  9d03              LDR      r5,[sp,#0xc]
000006  c42f              STM      r4!,{r0-r3,r5}
;;;41     	rtc_clock.mon=mon;
;;;42     	rtc_clock.day=day;
;;;43     	rtc_clock.hour=hour;
;;;44     	rtc_clock.min=min;
;;;45     }
000008  bd30              POP      {r4,r5,pc}
;;;46     
                          ENDP
00000a  0000              DCW      0x0000
                  |L1.12|
                          DCD      ||.bss||
                          AREA ||i.ZellerCongruence||, CODE, READONLY, ALIGN=1
                  ZellerCongruence PROC
;;;23     
;;;24     uint8_t ZellerCongruence(uint16_t year,uint16_t mon,uint16_t day) 
000000  b5f8              PUSH     {r3-r7,lr}
;;;25     {
000002  4617              MOV      r7,r2
000004  460c              MOV      r4,r1
;;;26         if (mon == 1 || mon == 2) {
000006  2901              CMP      r1,#1
000008  d001              BEQ      |L2.14|
00000a  2c02              CMP      r4,#2
00000c  d104              BNE      |L2.24|
                  |L2.14|
;;;27             mon += 12;
00000e  460c              MOV      r4,r1
000010  340c              ADDS     r4,r4,#0xc
000012  1e40              SUBS     r0,r0,#1
000014  b2a4              UXTH     r4,r4
;;;28             year -= 1;
000016  b280              UXTH     r0,r0
                  |L2.24|
;;;29         }
;;;30         int k = year % 100;
000018  2164              MOVS     r1,#0x64
00001a  f7fffffe          BL       __aeabi_uidivmod
;;;31         int j = year / 100;
00001e  4605              MOV      r5,r0
000020  460e              MOV      r6,r1                 ;30
;;;32         int h = day + 13 * (mon + 1) / 5 + k + k / 4 + j / 4 + 5 * j;
000022  200d              MOVS     r0,#0xd
000024  1c64              ADDS     r4,r4,#1
000026  4360              MULS     r0,r4,r0
000028  2105              MOVS     r1,#5
00002a  f7fffffe          BL       __aeabi_uidivmod
00002e  17f1              ASRS     r1,r6,#31
000030  0f89              LSRS     r1,r1,#30
000032  19c0              ADDS     r0,r0,r7
000034  1989              ADDS     r1,r1,r6
000036  1980              ADDS     r0,r0,r6
000038  1089              ASRS     r1,r1,#2
00003a  1840              ADDS     r0,r0,r1
00003c  17e9              ASRS     r1,r5,#31
00003e  0f89              LSRS     r1,r1,#30
000040  1949              ADDS     r1,r1,r5
000042  1089              ASRS     r1,r1,#2
000044  1840              ADDS     r0,r0,r1
000046  00a9              LSLS     r1,r5,#2
000048  1869              ADDS     r1,r5,r1
00004a  1840              ADDS     r0,r0,r1
;;;33         h = h % 7;
00004c  2107              MOVS     r1,#7
00004e  f7fffffe          BL       __aeabi_idivmod
000052  4608              MOV      r0,r1
;;;34         return (h + 5) % 7 + 1; 
000054  2107              MOVS     r1,#7
000056  1d40              ADDS     r0,r0,#5
000058  f7fffffe          BL       __aeabi_idivmod
00005c  1c49              ADDS     r1,r1,#1
00005e  b2c8              UXTB     r0,r1
;;;35     }
000060  bdf8              POP      {r3-r7,pc}
;;;36     
                          ENDP
                          AREA ||i.getDaysInMonth||, CODE, READONLY, ALIGN=1
                  getDaysInMonth PROC
;;;8      
;;;9      uint16_t getDaysInMonth(uint16_t year, uint16_t month) 
000000  b510              PUSH     {r4,lr}
;;;10     {
000002  4604              MOV      r4,r0
;;;11         switch (month) {
000004  000b              MOVS     r3,r1
000006  f7fffffe          BL       __ARM_common_switch8
00000a  0d1f              DCB      0x0d,0x1f
00000c  080c080a          DCB      0x08,0x0c,0x08,0x0a
000010  080a0808          DCB      0x08,0x0a,0x08,0x08
000014  0a080a08          DCB      0x0a,0x08,0x0a,0x08
000018  1f00              DCB      0x1f,0x00
;;;12             case 1: case 3: case 5: case 7: case 8: case 10: case 12:
;;;13                 return 31;
00001a  201f              MOVS     r0,#0x1f
;;;14             case 4: case 6: case 9: case 11:
;;;15                 return 30;
;;;16             case 2:
;;;17                 return (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0)) ? 29 : 28;  
;;;18             default:
;;;19                 return 0; 
;;;20         }
;;;21     }
00001c  bd10              POP      {r4,pc}
00001e  201e              MOVS     r0,#0x1e              ;15
000020  bd10              POP      {r4,pc}
000022  07a0              LSLS     r0,r4,#30             ;17
000024  d10c              BNE      |L3.64|
000026  2164              MOVS     r1,#0x64              ;17
000028  4620              MOV      r0,r4                 ;17
00002a  f7fffffe          BL       __aeabi_uidivmod
00002e  2900              CMP      r1,#0                 ;17
000030  d108              BNE      |L3.68|
000032  21ff              MOVS     r1,#0xff              ;17
000034  3191              ADDS     r1,r1,#0x91           ;17
000036  4620              MOV      r0,r4                 ;17
000038  f7fffffe          BL       __aeabi_uidivmod
00003c  2900              CMP      r1,#0                 ;17
00003e  d001              BEQ      |L3.68|
                  |L3.64|
000040  201c              MOVS     r0,#0x1c              ;17
000042  bd10              POP      {r4,pc}
                  |L3.68|
000044  201d              MOVS     r0,#0x1d              ;17
000046  bd10              POP      {r4,pc}
000048  2000              MOVS     r0,#0                 ;19
00004a  bd10              POP      {r4,pc}
;;;22     
                          ENDP
                          AREA ||i.time_go||, CODE, READONLY, ALIGN=2
                  time_go PROC
;;;46     
;;;47     void time_go(void)
000000  b5f8              PUSH     {r3-r7,lr}
;;;48     {
;;;49       while(1)
;;;50        {
;;;51             
;;;52     	  int8_t i=0;
;;;53     	  if(i!=btm_interrupt_count)
000002  4d1b              LDR      r5,|L4.112|
000004  2600              MOVS     r6,#0
;;;54     	  {
;;;55     	    i=btm_interrupt_count;
;;;56     		if(i>=60)
;;;57     		{
;;;58     					rtc_clock.min++;
000006  4c1b              LDR      r4,|L4.116|
;;;59     					btm_interrupt_count=0;
;;;60     					i=0;
;;;61     			
;;;62     			if(rtc_clock.min>=60)
;;;63     			{
;;;64     					rtc_clock.hour++;
;;;65     			
;;;66     			if(rtc_clock.hour>=24)
;;;67     				{
;;;68     				    rtc_clock.hour=0;
;;;69     					rtc_clock.day++;
;;;70     			
;;;71     			if(rtc_clock.day>=getDaysInMonth(rtc_clock.year,rtc_clock.mon))
;;;72     				  {
;;;73     					  rtc_clock.day=1;
000008  2701              MOVS     r7,#1
                  |L4.10|
00000a  8829              LDRH     r1,[r5,#0]            ;53  ; btm_interrupt_count
00000c  2900              CMP      r1,#0                 ;53
00000e  d02e              BEQ      |L4.110|
000010  8828              LDRH     r0,[r5,#0]            ;55  ; btm_interrupt_count
000012  b240              SXTB     r0,r0                 ;55
000014  283c              CMP      r0,#0x3c              ;56
000016  db21              BLT      |L4.92|
000018  6920              LDR      r0,[r4,#0x10]         ;58  ; rtc_clock
00001a  1c40              ADDS     r0,r0,#1              ;58
00001c  6120              STR      r0,[r4,#0x10]         ;59  ; rtc_clock
00001e  802e              STRH     r6,[r5,#0]            ;59
000020  283c              CMP      r0,#0x3c              ;62
000022  d31b              BCC      |L4.92|
000024  68e0              LDR      r0,[r4,#0xc]          ;64  ; rtc_clock
000026  1c40              ADDS     r0,r0,#1              ;64
000028  60e0              STR      r0,[r4,#0xc]          ;66  ; rtc_clock
00002a  2818              CMP      r0,#0x18              ;66
00002c  d316              BCC      |L4.92|
00002e  60e6              STR      r6,[r4,#0xc]          ;69  ; rtc_clock
000030  68a0              LDR      r0,[r4,#8]            ;69  ; rtc_clock
000032  1c40              ADDS     r0,r0,#1              ;69
000034  60a0              STR      r0,[r4,#8]            ;71  ; rtc_clock
000036  88a0              LDRH     r0,[r4,#4]            ;71  ; rtc_clock
000038  b281              UXTH     r1,r0                 ;71
00003a  8820              LDRH     r0,[r4,#0]            ;71  ; rtc_clock
00003c  b280              UXTH     r0,r0                 ;71
00003e  f7fffffe          BL       getDaysInMonth
000042  68a1              LDR      r1,[r4,#8]            ;71  ; rtc_clock
000044  4288              CMP      r0,r1                 ;71
000046  d809              BHI      |L4.92|
;;;74     					  rtc_clock.mon++;
000048  60a7              STR      r7,[r4,#8]  ; rtc_clock
00004a  6860              LDR      r0,[r4,#4]  ; rtc_clock
00004c  1c40              ADDS     r0,r0,#1
;;;75     			 
;;;76     			if(rtc_clock.mon>=12)
00004e  6060              STR      r0,[r4,#4]  ; rtc_clock
000050  280c              CMP      r0,#0xc
000052  d303              BCC      |L4.92|
;;;77     				    {
;;;78     					    rtc_clock.mon=1;
;;;79     				    	rtc_clock.year++;
000054  6067              STR      r7,[r4,#4]  ; rtc_clock
000056  6820              LDR      r0,[r4,#0]  ; rtc_clock
000058  1c40              ADDS     r0,r0,#1
00005a  6020              STR      r0,[r4,#0]  ; rtc_clock
                  |L4.92|
;;;80     					}
;;;81     				  }
;;;82     				}
;;;83     			}
;;;84     		}
;;;85     	    
;;;86     		uint8_t dayofweek;
;;;87     		uint8_t getdayOfWeek = ZellerCongruence(rtc_clock.year,rtc_clock.mon,rtc_clock.day);
00005c  8920              LDRH     r0,[r4,#8]  ; rtc_clock
00005e  b282              UXTH     r2,r0
000060  88a0              LDRH     r0,[r4,#4]  ; rtc_clock
000062  b281              UXTH     r1,r0
000064  8820              LDRH     r0,[r4,#0]  ; rtc_clock
000066  b280              UXTH     r0,r0
000068  f7fffffe          BL       ZellerCongruence
;;;88     	    switch (getdayOfWeek) 
00006c  e7cd              B        |L4.10|
                  |L4.110|
;;;89     	      {
;;;90     	        case 1: dayofweek=7; 
;;;91     	        case 2: dayofweek=1; 
;;;92     	        case 3: dayofweek=2; 
;;;93     	        case 4: dayofweek=3; 
;;;94     	        case 5: dayofweek=4; 
;;;95     	        case 6: dayofweek=5; 
;;;96     	        case 0: dayofweek=6; 
;;;97     	        default:dayofweek=0; 
;;;98     	      }
;;;99     	   }
;;;100    	   else break;
;;;101       }
;;;102    }
00006e  bdf8              POP      {r3-r7,pc}
;;;103    
                          ENDP
                  |L4.112|
                          DCD      btm_interrupt_count
                  |L4.116|
                          DCD      ||.bss||
                          AREA ||.bss||, DATA, NOINIT, ALIGN=2
                  rtc_clock
                          %        28
                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1
                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d200              BCS      |L34.16|
00000e  461d              MOV      r5,r3
                  |L34.16|
000010  5d63              LDRB     r3,[r4,r5]
000012  005b              LSLS     r3,r3,#1
000014  18e3              ADDS     r3,r4,r3
000016  bc30              POP      {r4,r5}
000018  4718              BX       r3
                          ENDP
;*** Start embedded assembler ***
#line 1 ".\\shizhong.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_shizhong_c_4068ffa9____REV16|
#line 463 "..\\CMSIS\\cmsis_armcc.h"
|__asm___10_shizhong_c_4068ffa9____REV16| PROC
#line 464
 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_shizhong_c_4068ffa9____REVSH|
#line 478
|__asm___10_shizhong_c_4068ffa9____REVSH| PROC
#line 479
 revsh r0, r0
 bx lr
	ENDP
;*** End   embedded assembler ***
