; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: armcc [4d3637]
; commandline armcc [--c99 --list --split_sections --debug -c --asm --interleave -o..\Output\SC_Init.o --asm_dir=..\List --list_dir=..\List --cpu=Cortex-M0+ --apcs=interwork -I..\FWLib\SC32F1XXX_Lib\inc -I..\User\HeadFiles -I..\User -I..\Drivers -I..\Apps -I..\CMSIS -DSC32f10xx -D__UVISION_VERSION=536 ..\User\SC_Init.c]
                          THUMB
                          AREA ||i.SC_ACMP_Init||, CODE, READONLY, ALIGN=1
                  SC_ACMP_Init PROC
;;;555      */
;;;556    void SC_ACMP_Init(void)
000000  4770              BX       lr
;;;557    {
;;;558    	
;;;559        
;;;560    		
;;;561    }
;;;562    
                          ENDP
                          AREA ||i.SC_ADC_Init||, CODE, READONLY, ALIGN=1
                  SC_ADC_Init PROC
;;;331      */
;;;332    void SC_ADC_Init(void)
000000  4770              BX       lr
;;;333    {
;;;334    	
;;;335        
;;;336    	
;;;337    }
;;;338    
                          ENDP
                          AREA ||i.SC_BTM_Init||, CODE, READONLY, ALIGN=1
                  SC_BTM_Init PROC
;;;444      */
;;;445    void SC_BTM_Init(void)
000000  4770              BX       lr
;;;446    {
;;;447    	
;;;448        
;;;449    	
;;;450    }
;;;451    
                          ENDP
                          AREA ||i.SC_CRC_Init||, CODE, READONLY, ALIGN=1
                  SC_CRC_Init PROC
;;;457      */
;;;458    void SC_CRC_Init(void)
000000  4770              BX       lr
;;;459    {
;;;460    	
;;;461        
;;;462    	
;;;463    }
;;;464    
                          ENDP
                          AREA ||i.SC_DMA0_Init||, CODE, READONLY, ALIGN=1
                  SC_DMA0_Init PROC
;;;469      */
;;;470    void SC_DMA0_Init(void)
000000  4770              BX       lr
;;;471    {
;;;472    	
;;;473        
;;;474    	
;;;475    }
;;;476    
                          ENDP
                          AREA ||i.SC_DMA1_Init||, CODE, READONLY, ALIGN=1
                  SC_DMA1_Init PROC
;;;481      */
;;;482    void SC_DMA1_Init(void)
000000  4770              BX       lr
;;;483    {
;;;484    	
;;;485        
;;;486    	
;;;487    }
;;;488    #if defined (SC32f10xx)
                          ENDP
                          AREA ||i.SC_DMA2_Init||, CODE, READONLY, ALIGN=1
                  SC_DMA2_Init PROC
;;;494      */
;;;495    void SC_DMA2_Init(void)
000000  4770              BX       lr
;;;496    {
;;;497    	
;;;498        
;;;499    	
;;;500    }
;;;501    
                          ENDP
                          AREA ||i.SC_DMA3_Init||, CODE, READONLY, ALIGN=1
                  SC_DMA3_Init PROC
;;;506      */
;;;507    void SC_DMA3_Init(void)
000000  4770              BX       lr
;;;508    {
;;;509    	
;;;510        
;;;511    	
;;;512    }
;;;513    #endif
                          ENDP
                          AREA ||i.SC_GPIO_Init||, CODE, READONLY, ALIGN=1
                  SC_GPIO_Init PROC
;;;113      */
;;;114    void SC_GPIO_Init(void)
000000  4770              BX       lr
;;;115    {
;;;116    	
;;;117        
;;;118    			
;;;119    }
;;;120    
                          ENDP
                          AREA ||i.SC_IAP_Init||, CODE, READONLY, ALIGN=1
                  SC_IAP_Init PROC
;;;343      */
;;;344    void SC_IAP_Init(void)
000000  4770              BX       lr
;;;345    {
;;;346    	
;;;347        
;;;348    			
;;;349    }
;;;350    
                          ENDP
                          AREA ||i.SC_INT_Init||, CODE, READONLY, ALIGN=1
                  SC_INT_Init PROC
;;;319      */
;;;320    void SC_INT_Init(void)
000000  4770              BX       lr
;;;321    {
;;;322    	
;;;323        
;;;324    	
;;;325    }
;;;326    
                          ENDP
                          AREA ||i.SC_Init||, CODE, READONLY, ALIGN=1
                  SC_Init PROC
;;;29       */
;;;30     void SC_Init(void)
000000  b510              PUSH     {r4,lr}
;;;31     {
;;;32     	
;;;33         
;;;34     	SC_GPIO_Init();
;;;35     	SC_OPTION_Init();
000002  f7fffffe          BL       SC_OPTION_Init
;;;36     	SC_RCC_Init();
000006  f7fffffe          BL       SC_RCC_Init
;;;37     	SC_SYSTICK_Init();
00000a  f7fffffe          BL       SC_SYSTICK_Init
;;;38     	SC_TWI0_Init();
00000e  f7fffffe          BL       SC_TWI0_Init
;;;39     	
;;;40     }
000012  bd10              POP      {r4,pc}
;;;41     
                          ENDP
                          AREA ||i.SC_LCD_Init||, CODE, READONLY, ALIGN=1
                  SC_LCD_Init PROC
;;;531      */
;;;532    void SC_LCD_Init(void)
000000  4770              BX       lr
;;;533    {
;;;534    	
;;;535        
;;;536    	
;;;537    }
;;;538    
                          ENDP
                          AREA ||i.SC_LEDPWM_Init||, CODE, READONLY, ALIGN=1
                  SC_LEDPWM_Init PROC
;;;307      */
;;;308    void SC_LEDPWM_Init(void)
000000  4770              BX       lr
;;;309    {
;;;310    	
;;;311        
;;;312    		
;;;313    }
;;;314    
                          ENDP
                          AREA ||i.SC_LED_Init||, CODE, READONLY, ALIGN=1
                  SC_LED_Init PROC
;;;543      */
;;;544    void SC_LED_Init(void)
000000  4770              BX       lr
;;;545    {
;;;546    	
;;;547        
;;;548    	
;;;549    }
;;;550    
                          ENDP
                          AREA ||i.SC_NVIC_Init||, CODE, READONLY, ALIGN=1
                  SC_NVIC_Init PROC
;;;101      */
;;;102    void SC_NVIC_Init(void)
000000  4770              BX       lr
;;;103    {
;;;104    	
;;;105        
;;;106    		
;;;107    }
;;;108    
                          ENDP
                          AREA ||i.SC_OPTION_Init||, CODE, READONLY, ALIGN=2
                  SC_OPTION_Init PROC
;;;85       */
;;;86     void SC_OPTION_Init(void)
000000  b510              PUSH     {r4,lr}
;;;87     {
;;;88     	
;;;89         
;;;90     	SC32F10xSx_NIO_Init();
000002  480b              LDR      r0,|L17.48|
000004  2206              MOVS     r2,#6
000006  6a01              LDR      r1,[r0,#0x20]
000008  4311              ORRS     r1,r1,r2
00000a  6201              STR      r1,[r0,#0x20]
00000c  4809              LDR      r0,|L17.52|
00000e  2209              MOVS     r2,#9
000010  6a01              LDR      r1,[r0,#0x20]
000012  0312              LSLS     r2,r2,#12
000014  4311              ORRS     r1,r1,r2
;;;91     	OPTION_LVRConfig(OPTION_LVR_4_3V);
000016  6201              STR      r1,[r0,#0x20]
000018  2003              MOVS     r0,#3
00001a  f7fffffe          BL       OPTION_LVRConfig
;;;92     	OPTION_JTAGCmd(DISABLE);
00001e  2000              MOVS     r0,#0
000020  f7fffffe          BL       OPTION_JTAGCmd
;;;93     	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_IFB,DISABLE);
000024  2100              MOVS     r1,#0
000026  2004              MOVS     r0,#4
000028  f7fffffe          BL       RCC_AHBPeriphClockCmd
;;;94     		
;;;95     }
00002c  bd10              POP      {r4,pc}
;;;96     
                          ENDP
00002e  0000              DCW      0x0000
                  |L17.48|
                          DCD      0x40011000
                  |L17.52|
                          DCD      0x40011100
                          AREA ||i.SC_PWM0_Init||, CODE, READONLY, ALIGN=1
                  SC_PWM0_Init PROC
;;;295      */
;;;296    void SC_PWM0_Init(void)
000000  4770              BX       lr
;;;297    {
;;;298    	
;;;299        
;;;300    		
;;;301    }
;;;302    
                          ENDP
                          AREA ||i.SC_PWR_Init||, CODE, READONLY, ALIGN=1
                  SC_PWR_Init PROC
;;;567      */
;;;568    void SC_PWR_Init(void)
000000  4770              BX       lr
;;;569    {
;;;570    	
;;;571        
;;;572    		
;;;573    }
;;;574    #if defined (SC32f12xx)
                          ENDP
                          AREA ||i.SC_RCC_Init||, CODE, READONLY, ALIGN=2
                  SC_RCC_Init PROC
;;;46       */
;;;47     void SC_RCC_Init(void)
000000  b510              PUSH     {r4,lr}
;;;48     {
;;;49     	
;;;50         
;;;51     	RCC_Unlock(0xFF);
000002  20ff              MOVS     r0,#0xff
000004  f7fffffe          BL       RCC_Unlock
;;;52     	RCC_HXTCmd(DISABLE);
000008  2000              MOVS     r0,#0
00000a  f7fffffe          BL       RCC_HXTCmd
;;;53     	RCC_LXTCmd(DISABLE);
00000e  2000              MOVS     r0,#0
000010  f7fffffe          BL       RCC_LXTCmd
;;;54     	RCC_LIRCCmd(ENABLE);
000014  2001              MOVS     r0,#1
000016  f7fffffe          BL       RCC_LIRCCmd
;;;55     	RCC_HIRCCmd(ENABLE);
00001a  2001              MOVS     r0,#1
00001c  f7fffffe          BL       RCC_HIRCCmd
;;;56     	RCC_ITConfig(ENABLE);
000020  2001              MOVS     r0,#1
000022  f7fffffe          BL       RCC_ITConfig
;;;57     	RCC_SYSCLKConfig(RCC_SYSCLKSource_HIRC);
000026  4806              LDR      r0,|L20.64|
000028  f7fffffe          BL       RCC_SYSCLKConfig
;;;58     	RCC_HCLKConfig(RCC_SYSCLK_Div1);
00002c  2000              MOVS     r0,#0
00002e  f7fffffe          BL       RCC_HCLKConfig
;;;59     	RCC_APB0Config(RCC_HCLK_Div1);
000032  2000              MOVS     r0,#0
000034  f7fffffe          BL       RCC_APB0Config
;;;60     	RCC_APB0Cmd(ENABLE);
000038  2001              MOVS     r0,#1
00003a  f7fffffe          BL       RCC_APB0Cmd
;;;61     		
;;;62     }
00003e  bd10              POP      {r4,pc}
;;;63     
                          ENDP
                  |L20.64|
                          DCD      0x0000ff7f
                          AREA ||i.SC_SPI0_Init||, CODE, READONLY, ALIGN=1
                  SC_SPI0_Init PROC
;;;355      */
;;;356    void SC_SPI0_Init(void)
000000  4770              BX       lr
;;;357    {
;;;358    	
;;;359        
;;;360    			
;;;361    }
;;;362    
                          ENDP
                          AREA ||i.SC_SPI1_Init||, CODE, READONLY, ALIGN=1
                  SC_SPI1_Init PROC
;;;367      */
;;;368    void SC_SPI1_Init(void)
000000  4770              BX       lr
;;;369    {
;;;370    	
;;;371        
;;;372    			
;;;373    }
;;;374    #if defined (SC32f12xx)
                          ENDP
                          AREA ||i.SC_SYSTICK_Init||, CODE, READONLY, ALIGN=1
                  SC_SYSTICK_Init PROC
;;;68       */
;;;69     void SC_SYSTICK_Init(void)
000000  b510              PUSH     {r4,lr}
;;;70     {
;;;71     	
;;;72         
;;;73     	RCC_Unlock(0xFF);
000002  20ff              MOVS     r0,#0xff
000004  f7fffffe          BL       RCC_Unlock
;;;74     	RCC_SystickCLKConfig(RCC_SysTickSource_HCLK_DIV8);
000008  2000              MOVS     r0,#0
00000a  f7fffffe          BL       RCC_SystickCLKConfig
;;;75     	RCC_SystickSetCounter(16000);
00000e  207d              MOVS     r0,#0x7d
000010  01c0              LSLS     r0,r0,#7
000012  f7fffffe          BL       RCC_SystickSetCounter
;;;76     	NVIC_SetPriority(SysTick_IRQn,0);
000016  2100              MOVS     r1,#0
000018  1e48              SUBS     r0,r1,#1
00001a  f7fffffe          BL       __NVIC_SetPriority
;;;77     	RCC_SystickCmd(ENABLE);
00001e  2001              MOVS     r0,#1
000020  f7fffffe          BL       RCC_SystickCmd
;;;78     	
;;;79     }
000024  bd10              POP      {r4,pc}
;;;80     
                          ENDP
                          AREA ||i.SC_TIM0_Init||, CODE, READONLY, ALIGN=1
                  SC_TIM0_Init PROC
;;;199      */
;;;200    void SC_TIM0_Init(void)
000000  4770              BX       lr
;;;201    {
;;;202    	
;;;203        
;;;204    			
;;;205    }
;;;206    
                          ENDP
                          AREA ||i.SC_TIM1_Init||, CODE, READONLY, ALIGN=1
                  SC_TIM1_Init PROC
;;;211      */
;;;212    void SC_TIM1_Init(void)
000000  4770              BX       lr
;;;213    {
;;;214    	
;;;215        
;;;216    		
;;;217    }
;;;218    
                          ENDP
                          AREA ||i.SC_TIM2_Init||, CODE, READONLY, ALIGN=1
                  SC_TIM2_Init PROC
;;;223      */
;;;224    void SC_TIM2_Init(void)
000000  4770              BX       lr
;;;225    {
;;;226    	
;;;227        
;;;228    		
;;;229    }
;;;230    
                          ENDP
                          AREA ||i.SC_TIM3_Init||, CODE, READONLY, ALIGN=1
                  SC_TIM3_Init PROC
;;;235      */
;;;236    void SC_TIM3_Init(void)
000000  4770              BX       lr
;;;237    {
;;;238    	
;;;239        
;;;240    		
;;;241    }
;;;242    
                          ENDP
                          AREA ||i.SC_TIM4_Init||, CODE, READONLY, ALIGN=1
                  SC_TIM4_Init PROC
;;;247      */
;;;248    void SC_TIM4_Init(void)
000000  4770              BX       lr
;;;249    {
;;;250    	
;;;251        
;;;252    		
;;;253    }
;;;254    
                          ENDP
                          AREA ||i.SC_TIM5_Init||, CODE, READONLY, ALIGN=1
                  SC_TIM5_Init PROC
;;;259      */
;;;260    void SC_TIM5_Init(void)
000000  4770              BX       lr
;;;261    {
;;;262    	
;;;263        
;;;264    			
;;;265    }
;;;266    
                          ENDP
                          AREA ||i.SC_TIM6_Init||, CODE, READONLY, ALIGN=1
                  SC_TIM6_Init PROC
;;;271      */
;;;272    void SC_TIM6_Init(void)
000000  4770              BX       lr
;;;273    {
;;;274    	
;;;275        
;;;276    			
;;;277    }
;;;278    
                          ENDP
                          AREA ||i.SC_TIM7_Init||, CODE, READONLY, ALIGN=1
                  SC_TIM7_Init PROC
;;;283      */
;;;284    void SC_TIM7_Init(void)
000000  4770              BX       lr
;;;285    {
;;;286    	
;;;287        
;;;288    			
;;;289    }
;;;290    
                          ENDP
                          AREA ||i.SC_TWI0_Init||, CODE, READONLY, ALIGN=2
                  SC_TWI0_Init PROC
;;;394      */
;;;395    void SC_TWI0_Init(void)
000000  b570              PUSH     {r4-r6,lr}
;;;396    {
000002  b088              SUB      sp,sp,#0x20
;;;397    	
;;;398        
;;;399    	GPIO_InitTypeDef GPIOInit_PA05_Struct;
;;;400    	GPIOInit_PA05_Struct.GPIO_Pin = GPIO_Pin_5;
000004  2120              MOVS     r1,#0x20
000006  4668              MOV      r0,sp
000008  8181              STRH     r1,[r0,#0xc]
;;;401    	GPIOInit_PA05_Struct.GPIO_Mode = GPIO_Mode_IN_PU;
00000a  2501              MOVS     r5,#1
00000c  81c5              STRH     r5,[r0,#0xe]
;;;402    	GPIOInit_PA05_Struct.GPIO_DriveLevel = 0;
00000e  2400              MOVS     r4,#0
;;;403    	GPIO_Init(GPIOA,&GPIOInit_PA05_Struct);
000010  4e1f              LDR      r6,|L32.144|
000012  8204              STRH     r4,[r0,#0x10]         ;402
000014  a903              ADD      r1,sp,#0xc
000016  4630              MOV      r0,r6
000018  f7fffffe          BL       GPIO_Init
;;;404    	GPIO_InitTypeDef GPIOInit_PA06_Struct;
;;;405    	GPIOInit_PA06_Struct.GPIO_Pin = GPIO_Pin_6;
00001c  2140              MOVS     r1,#0x40
00001e  4668              MOV      r0,sp
000020  8281              STRH     r1,[r0,#0x14]
;;;406    	GPIOInit_PA06_Struct.GPIO_Mode = GPIO_Mode_IN_PU;
000022  82c5              STRH     r5,[r0,#0x16]
;;;407    	GPIOInit_PA06_Struct.GPIO_DriveLevel = 0;
000024  8304              STRH     r4,[r0,#0x18]
;;;408    	GPIO_Init(GPIOA,&GPIOInit_PA06_Struct);
000026  a905              ADD      r1,sp,#0x14
000028  4630              MOV      r0,r6
00002a  f7fffffe          BL       GPIO_Init
;;;409    	RCC_APB0PeriphClockCmd(RCC_APB0Periph_TWI0, ENABLE);
00002e  2101              MOVS     r1,#1
000030  2010              MOVS     r0,#0x10
000032  f7fffffe          BL       RCC_APB0PeriphClockCmd
;;;410    	TWI_InitTypeDef TWI_InitStruct;
;;;411    	TWI_InitStruct.TWI_Ack = TWI_Ack_Enable;
000036  2102              MOVS     r1,#2
000038  4668              MOV      r0,sp
00003a  8001              STRH     r1,[r0,#0]
;;;412    	TWI_InitStruct.TWI_Prescaler = TWI_PRESCALER_2048;
00003c  01c9              LSLS     r1,r1,#7
00003e  8041              STRH     r1,[r0,#2]
;;;413    	TWI_InitStruct.TWI_Stretch = TWI_Stretch_Disable;
000040  8084              STRH     r4,[r0,#4]
;;;414    	TWI_InitStruct.TWI_SlaveAdress = 0x01;
;;;415    	TWI_InitStruct.TWI_GeneralCall = TWI_GeneralCall_Disable;
000042  9502              STR      r5,[sp,#8]
000044  80c4              STRH     r4,[r0,#6]
;;;416    	TWI_Init(TWI0, &TWI_InitStruct);
000046  4c13              LDR      r4,|L32.148|
000048  4669              MOV      r1,sp
00004a  4620              MOV      r0,r4
00004c  f7fffffe          BL       TWI_Init
;;;417    	TWI_PinRemapConfig(TWI0,TWI_PinRemap_B);
000050  03e9              LSLS     r1,r5,#15
000052  4620              MOV      r0,r4
000054  f7fffffe          BL       TWI_PinRemapConfig
;;;418    	TWI_ITConfig(TWI0,TWI_IT_INT,ENABLE);
000058  2201              MOVS     r2,#1
00005a  4611              MOV      r1,r2
00005c  4620              MOV      r0,r4
00005e  f7fffffe          BL       TWI_ITConfig
;;;419    	TWI_DMACmd(TWI0,TWI_DMAReq_TX,DISABLE);
000062  2200              MOVS     r2,#0
000064  2180              MOVS     r1,#0x80
000066  4620              MOV      r0,r4
000068  f7fffffe          BL       TWI_DMACmd
;;;420    	TWI_DMACmd(TWI0,TWI_DMAReq_RX,DISABLE);
00006c  2200              MOVS     r2,#0
00006e  2140              MOVS     r1,#0x40
000070  4620              MOV      r0,r4
000072  f7fffffe          BL       TWI_DMACmd
;;;421    	NVIC_SetPriority(TWI0_IRQn,3);
000076  2103              MOVS     r1,#3
000078  2017              MOVS     r0,#0x17
00007a  f7fffffe          BL       __NVIC_SetPriority
00007e  4a06              LDR      r2,|L32.152|
000080  05e9              LSLS     r1,r5,#23
000082  6011              STR      r1,[r2,#0]
;;;422    	NVIC_EnableIRQ(TWI0_IRQn);
;;;423    	TWI_Cmd(TWI0,ENABLE);
000084  2101              MOVS     r1,#1
000086  4620              MOV      r0,r4
000088  f7fffffe          BL       TWI_Cmd
;;;424    			
;;;425    }
00008c  b008              ADD      sp,sp,#0x20
00008e  bd70              POP      {r4-r6,pc}
;;;426    
                          ENDP
                  |L32.144|
                          DCD      0x40011000
                  |L32.148|
                          DCD      0x40020060
                  |L32.152|
                          DCD      0xe000e100
                          AREA ||i.SC_TWI1_Init||, CODE, READONLY, ALIGN=1
                  SC_TWI1_Init PROC
;;;431      */
;;;432    void SC_TWI1_Init(void)
000000  4770              BX       lr
;;;433    {
;;;434    	
;;;435        
;;;436    			
;;;437    }
;;;438    
                          ENDP
                          AREA ||i.SC_UART0_Init||, CODE, READONLY, ALIGN=1
                  SC_UART0_Init PROC
;;;125      */
;;;126    void SC_UART0_Init(void)
000000  4770              BX       lr
;;;127    {
;;;128    	
;;;129        
;;;130    			
;;;131    }
;;;132    
                          ENDP
                          AREA ||i.SC_UART1_Init||, CODE, READONLY, ALIGN=1
                  SC_UART1_Init PROC
;;;137      */
;;;138    void SC_UART1_Init(void)
000000  4770              BX       lr
;;;139    {
;;;140    	
;;;141        
;;;142    			
;;;143    }
;;;144    
                          ENDP
                          AREA ||i.SC_UART2_Init||, CODE, READONLY, ALIGN=1
                  SC_UART2_Init PROC
;;;149      */
;;;150    void SC_UART2_Init(void)
000000  4770              BX       lr
;;;151    {
;;;152    	
;;;153        
;;;154    			
;;;155    }
;;;156    
                          ENDP
                          AREA ||i.SC_UART3_Init||, CODE, READONLY, ALIGN=1
                  SC_UART3_Init PROC
;;;161      */
;;;162    void SC_UART3_Init(void)
000000  4770              BX       lr
;;;163    {
;;;164    	
;;;165        
;;;166    			
;;;167    }
;;;168    #if defined (SC32f12xx)
                          ENDP
                          AREA ||i.SC_WDT_Init||, CODE, READONLY, ALIGN=1
                  SC_WDT_Init PROC
;;;519      */
;;;520    void SC_WDT_Init(void)
000000  4770              BX       lr
;;;521    {
;;;522    	
;;;523        
;;;524    		
;;;525    }
;;;526    
                          ENDP
                          AREA ||i.__NVIC_SetPriority||, CODE, READONLY, ALIGN=2
                  __NVIC_SetPriority PROC
;;;847     */
;;;848    __STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
000000  0783              LSLS     r3,r0,#30
;;;849    {
;;;850      if ((int32_t)(IRQn) >= 0)
;;;851      {
;;;852        NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
000002  22ff              MOVS     r2,#0xff
000004  0edb              LSRS     r3,r3,#27
000006  409a              LSLS     r2,r2,r3
000008  0789              LSLS     r1,r1,#30
00000a  0e09              LSRS     r1,r1,#24
00000c  4099              LSLS     r1,r1,r3
00000e  2800              CMP      r0,#0                 ;850
000010  db08              BLT      |L39.36|
000012  0883              LSRS     r3,r0,#2
000014  4809              LDR      r0,|L39.60|
000016  009b              LSLS     r3,r3,#2
000018  1818              ADDS     r0,r3,r0
00001a  6803              LDR      r3,[r0,#0]
00001c  4393              BICS     r3,r3,r2
00001e  430b              ORRS     r3,r3,r1
000020  6003              STR      r3,[r0,#0]
;;;853           (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
;;;854      }
;;;855      else
;;;856      {
;;;857        SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
;;;858           (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
;;;859      }
;;;860    }
000022  4770              BX       lr
                  |L39.36|
000024  0700              LSLS     r0,r0,#28             ;857
000026  0f00              LSRS     r0,r0,#28             ;857
000028  3808              SUBS     r0,r0,#8              ;857
00002a  0883              LSRS     r3,r0,#2              ;857
00002c  4804              LDR      r0,|L39.64|
00002e  009b              LSLS     r3,r3,#2              ;857
000030  1818              ADDS     r0,r3,r0              ;857
000032  69c3              LDR      r3,[r0,#0x1c]         ;857
000034  4393              BICS     r3,r3,r2              ;857
000036  430b              ORRS     r3,r3,r1              ;857
000038  61c3              STR      r3,[r0,#0x1c]         ;857
00003a  4770              BX       lr
;;;861    
                          ENDP
                  |L39.60|
                          DCD      0xe000e400
                  |L39.64|
                          DCD      0xe000ed00
;*** Start embedded assembler ***
#line 1 "..\\User\\SC_Init.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_SC_Init_c_SC_Init____REV16|
#line 463 "..\\CMSIS\\cmsis_armcc.h"
|__asm___9_SC_Init_c_SC_Init____REV16| PROC
#line 464
 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_SC_Init_c_SC_Init____REVSH|
#line 478
|__asm___9_SC_Init_c_SC_Init____REVSH| PROC
#line 479
 revsh r0, r0
 bx lr
	ENDP
;*** End   embedded assembler ***
