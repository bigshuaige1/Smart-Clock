; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: armcc [4d3637]
; commandline armcc [--c99 --list --split_sections --debug -c --asm --interleave -o..\Output\sc32f1xxx_rcc.o --asm_dir=..\List --list_dir=..\List --cpu=Cortex-M0+ --apcs=interwork -I..\FWLib\SC32F1XXX_Lib\inc -I..\User\HeadFiles -I..\User -I..\Drivers -I..\Apps -I..\CMSIS -DSC32f10xx -D__UVISION_VERSION=536 ..\FWLib\SC32F1XXX_Lib\src\sc32f1xxx_rcc.c]
                          THUMB
                          AREA ||i.RCC_AHBPeriphClockCmd||, CODE, READONLY, ALIGN=2
                  RCC_AHBPeriphClockCmd PROC
;;;725      */
;;;726    void RCC_AHBPeriphClockCmd ( uint32_t RCC_AHBPeriph, FunctionalState NewState )
000000  4a04              LDR      r2,|L1.20|
;;;727    {
;;;728        
;;;729        assert_param ( IS_RCC_AHBPERIPH ( RCC_AHBPeriph ) );
;;;730    
;;;731        if ( NewState != DISABLE )
000002  2900              CMP      r1,#0
;;;732        {
;;;733            RCCAHB->AHB_CFG |= RCC_AHBPeriph;
;;;734        }
;;;735        else
;;;736        {
;;;737            RCCAHB->AHB_CFG &= ~RCC_AHBPeriph;
000004  6811              LDR      r1,[r2,#0]
000006  d001              BEQ      |L1.12|
000008  4301              ORRS     r1,r1,r0              ;733
00000a  e000              B        |L1.14|
                  |L1.12|
00000c  4381              BICS     r1,r1,r0
                  |L1.14|
00000e  6011              STR      r1,[r2,#0]            ;733
;;;738        }
;;;739    }
000010  4770              BX       lr
;;;740    
                          ENDP
000012  0000              DCW      0x0000
                  |L1.20|
                          DCD      0x40003000
                          AREA ||i.RCC_AHBPeriphResetCmd||, CODE, READONLY, ALIGN=2
                  RCC_AHBPeriphResetCmd PROC
;;;854     */
;;;855    void RCC_AHBPeriphResetCmd ( uint32_t RCC_AHBPeriph, FunctionalState NewState )
000000  4a04              LDR      r2,|L2.20|
;;;856    {
;;;857        
;;;858        assert_param ( IS_RCC_AHBPERIPH ( RCC_AHBPeriph ) );
;;;859    
;;;860        if ( NewState != DISABLE )
000002  2900              CMP      r1,#0
;;;861        {
;;;862            RCCAHB->AHB_RST |= RCC_AHBPeriph;
;;;863        }
;;;864        else
;;;865        {
;;;866            RCCAHB->AHB_RST &= ~RCC_AHBPeriph;
000004  6851              LDR      r1,[r2,#4]
000006  d001              BEQ      |L2.12|
000008  4301              ORRS     r1,r1,r0              ;862
00000a  e000              B        |L2.14|
                  |L2.12|
00000c  4381              BICS     r1,r1,r0
                  |L2.14|
00000e  6051              STR      r1,[r2,#4]            ;862
;;;867        }
;;;868    }
000010  4770              BX       lr
;;;869    
                          ENDP
000012  0000              DCW      0x0000
                  |L2.20|
                          DCD      0x40003000
                          AREA ||i.RCC_APB0Cmd||, CODE, READONLY, ALIGN=2
                  RCC_APB0Cmd PROC
;;;257      */
;;;258    void RCC_APB0Cmd ( FunctionalState NewState )
000000  4904              LDR      r1,|L3.20|
;;;259    {
;;;260        
;;;261        assert_param ( IS_FUNCTIONAL_STATE ( NewState ) );
;;;262    
;;;263        if ( NewState != DISABLE )
;;;264        {
;;;265            RCCAPB0->APB0_CFG |= APB0_CFG_ENAPB;
000002  018a              LSLS     r2,r1,#6
000004  2800              CMP      r0,#0                 ;263
;;;266        }
;;;267        else
;;;268        {
;;;269            RCCAPB0->APB0_CFG &= ~APB0_CFG_ENAPB;
000006  6808              LDR      r0,[r1,#0]
000008  d001              BEQ      |L3.14|
00000a  4310              ORRS     r0,r0,r2              ;265
00000c  e000              B        |L3.16|
                  |L3.14|
00000e  4390              BICS     r0,r0,r2
                  |L3.16|
000010  6008              STR      r0,[r1,#0]            ;265
;;;270        }
;;;271    }
000012  4770              BX       lr
;;;272    
                          ENDP
                  |L3.20|
                          DCD      0x40020000
                          AREA ||i.RCC_APB0Config||, CODE, READONLY, ALIGN=2
                  RCC_APB0Config PROC
;;;495     */
;;;496    void RCC_APB0Config ( RCC_PCLK_TypeDef RCC_APB0CLK )
000000  4904              LDR      r1,|L4.20|
;;;497    {
;;;498        
;;;499        assert_param ( IS_RCC_PCLK ( RCC_APB0CLK ) );
;;;500    
;;;501        RCCAPB0->APB0_CFG &= ~ ( ( uint32_t ) APB0_CFG_CLKDIV );
000002  680a              LDR      r2,[r1,#0]
000004  2307              MOVS     r3,#7
000006  051b              LSLS     r3,r3,#20
000008  439a              BICS     r2,r2,r3
00000a  600a              STR      r2,[r1,#0]
;;;502        RCCAPB0->APB0_CFG |= RCC_APB0CLK;
00000c  680a              LDR      r2,[r1,#0]
00000e  4302              ORRS     r2,r2,r0
000010  600a              STR      r2,[r1,#0]
;;;503    }
000012  4770              BX       lr
;;;504    
                          ENDP
                  |L4.20|
                          DCD      0x40020000
                          AREA ||i.RCC_APB0PeriphClockCmd||, CODE, READONLY, ALIGN=2
                  RCC_APB0PeriphClockCmd PROC
;;;762      */
;;;763    void RCC_APB0PeriphClockCmd ( uint32_t RCC_APB0Periph, FunctionalState NewState )
000000  4a04              LDR      r2,|L5.20|
;;;764    {
;;;765        
;;;766        assert_param ( IS_RCC_APB0PERIPH ( RCC_APB0Periph ) );
;;;767    
;;;768        if ( NewState != DISABLE )
000002  2900              CMP      r1,#0
;;;769        {
;;;770            RCCAPB0->APB0_CFG |= RCC_APB0Periph;
;;;771        }
;;;772        else
;;;773        {
;;;774            RCCAPB0->APB0_CFG &= ~RCC_APB0Periph;
000004  6811              LDR      r1,[r2,#0]
000006  d001              BEQ      |L5.12|
000008  4301              ORRS     r1,r1,r0              ;770
00000a  e000              B        |L5.14|
                  |L5.12|
00000c  4381              BICS     r1,r1,r0
                  |L5.14|
00000e  6011              STR      r1,[r2,#0]            ;770
;;;775        }
;;;776    }
000010  4770              BX       lr
;;;777    
                          ENDP
000012  0000              DCW      0x0000
                  |L5.20|
                          DCD      0x40020000
                          AREA ||i.RCC_APB0PeriphResetCmd||, CODE, READONLY, ALIGN=2
                  RCC_APB0PeriphResetCmd PROC
;;;890     */
;;;891    void RCC_APB0PeriphResetCmd ( uint32_t RCC_APB0Periph, FunctionalState NewState )
000000  4a04              LDR      r2,|L6.20|
;;;892    {
;;;893        
;;;894        assert_param ( IS_RCC_APB0PERIPH ( RCC_APB0Periph ) );
;;;895    
;;;896        if ( NewState != DISABLE )
000002  2900              CMP      r1,#0
;;;897        {
;;;898            RCCAPB0->APB0_RST |= RCC_APB0Periph;
;;;899        }
;;;900        else
;;;901        {
;;;902            RCCAPB0->APB0_RST &= ~RCC_APB0Periph;
000004  6851              LDR      r1,[r2,#4]
000006  d001              BEQ      |L6.12|
000008  4301              ORRS     r1,r1,r0              ;898
00000a  e000              B        |L6.14|
                  |L6.12|
00000c  4381              BICS     r1,r1,r0
                  |L6.14|
00000e  6051              STR      r1,[r2,#4]            ;898
;;;903        }
;;;904    }
000010  4770              BX       lr
;;;905    
                          ENDP
000012  0000              DCW      0x0000
                  |L6.20|
                          DCD      0x40020000
                          AREA ||i.RCC_APB1Cmd||, CODE, READONLY, ALIGN=2
                  RCC_APB1Cmd PROC
;;;279      */
;;;280    void RCC_APB1Cmd ( FunctionalState NewState )
000000  2201              MOVS     r2,#1
;;;281    {
;;;282        
;;;283        assert_param ( IS_FUNCTIONAL_STATE ( NewState ) );
;;;284    
;;;285        if ( NewState != DISABLE )
;;;286        {
;;;287            RCCAPB1->APB1_CFG |= APB1_CFG_ENAPB;
000002  4905              LDR      r1,|L7.24|
000004  05d2              LSLS     r2,r2,#23
000006  2800              CMP      r0,#0                 ;285
;;;288        }
;;;289        else
;;;290        {
;;;291            RCCAPB1->APB1_CFG &= ~APB1_CFG_ENAPB;
000008  6808              LDR      r0,[r1,#0]
00000a  d001              BEQ      |L7.16|
00000c  4310              ORRS     r0,r0,r2              ;287
00000e  e000              B        |L7.18|
                  |L7.16|
000010  4390              BICS     r0,r0,r2
                  |L7.18|
000012  6008              STR      r0,[r1,#0]            ;287
;;;292        }
;;;293    }
000014  4770              BX       lr
;;;294    
                          ENDP
000016  0000              DCW      0x0000
                  |L7.24|
                          DCD      0x40021000
                          AREA ||i.RCC_APB1Config||, CODE, READONLY, ALIGN=2
                  RCC_APB1Config PROC
;;;517     */
;;;518    void RCC_APB1Config ( RCC_PCLK_TypeDef RCC_APB1CLK )
000000  4904              LDR      r1,|L8.20|
;;;519    {
;;;520        
;;;521        assert_param ( IS_RCC_PCLK ( RCC_APB1CLK ) );
;;;522    
;;;523        RCCAPB1->APB1_CFG &= ~ ( ( uint32_t ) APB1_CFG_CLKDIV );
000002  680a              LDR      r2,[r1,#0]
000004  2307              MOVS     r3,#7
000006  051b              LSLS     r3,r3,#20
000008  439a              BICS     r2,r2,r3
00000a  600a              STR      r2,[r1,#0]
;;;524        RCCAPB1->APB1_CFG |= RCC_APB1CLK;
00000c  680a              LDR      r2,[r1,#0]
00000e  4302              ORRS     r2,r2,r0
000010  600a              STR      r2,[r1,#0]
;;;525    }
000012  4770              BX       lr
;;;526    
                          ENDP
                  |L8.20|
                          DCD      0x40021000
                          AREA ||i.RCC_APB1PeriphClockCmd||, CODE, READONLY, ALIGN=2
                  RCC_APB1PeriphClockCmd PROC
;;;796      */
;;;797    void RCC_APB1PeriphClockCmd ( uint32_t RCC_APB1Periph, FunctionalState NewState )
000000  4a04              LDR      r2,|L9.20|
;;;798    {
;;;799        
;;;800        assert_param ( IS_RCC_APB1PERIPH ( RCC_APB1Periph ) );
;;;801    
;;;802        if ( NewState != DISABLE )
000002  2900              CMP      r1,#0
;;;803        {
;;;804            RCCAPB1->APB1_CFG |= RCC_APB1Periph;
;;;805        }
;;;806        else
;;;807        {
;;;808            RCCAPB1->APB1_CFG &= ~RCC_APB1Periph;
000004  6811              LDR      r1,[r2,#0]
000006  d001              BEQ      |L9.12|
000008  4301              ORRS     r1,r1,r0              ;804
00000a  e000              B        |L9.14|
                  |L9.12|
00000c  4381              BICS     r1,r1,r0
                  |L9.14|
00000e  6011              STR      r1,[r2,#0]            ;804
;;;809        }
;;;810    }
000010  4770              BX       lr
;;;811    
                          ENDP
000012  0000              DCW      0x0000
                  |L9.20|
                          DCD      0x40021000
                          AREA ||i.RCC_APB1PeriphResetCmd||, CODE, READONLY, ALIGN=2
                  RCC_APB1PeriphResetCmd PROC
;;;924     */
;;;925    void RCC_APB1PeriphResetCmd ( uint32_t RCC_APB1Periph, FunctionalState NewState )
000000  4a04              LDR      r2,|L10.20|
;;;926    {
;;;927        
;;;928        assert_param ( IS_RCC_APB1PERIPH ( RCC_APB1Periph ) );
;;;929    
;;;930        if ( NewState != DISABLE )
000002  2900              CMP      r1,#0
;;;931        {
;;;932            RCCAPB1->APB1_RST |= RCC_APB1Periph;
;;;933        }
;;;934        else
;;;935        {
;;;936            RCCAPB1->APB1_RST &= ~RCC_APB1Periph;
000004  6851              LDR      r1,[r2,#4]
000006  d001              BEQ      |L10.12|
000008  4301              ORRS     r1,r1,r0              ;932
00000a  e000              B        |L10.14|
                  |L10.12|
00000c  4381              BICS     r1,r1,r0
                  |L10.14|
00000e  6051              STR      r1,[r2,#4]            ;932
;;;937        }
;;;938    }
000010  4770              BX       lr
;;;939    
                          ENDP
000012  0000              DCW      0x0000
                  |L10.20|
                          DCD      0x40021000
                          AREA ||i.RCC_APB2Cmd||, CODE, READONLY, ALIGN=2
                  RCC_APB2Cmd PROC
;;;301      */
;;;302    void RCC_APB2Cmd ( FunctionalState NewState )
000000  2201              MOVS     r2,#1
;;;303    {
;;;304        
;;;305        assert_param ( IS_FUNCTIONAL_STATE ( NewState ) );
;;;306    
;;;307        if ( NewState != DISABLE )
;;;308        {
;;;309            RCCAPB2->APB2_CFG |= APB2_CFG_ENAPB;
000002  4905              LDR      r1,|L11.24|
000004  05d2              LSLS     r2,r2,#23
000006  2800              CMP      r0,#0                 ;307
;;;310        }
;;;311        else
;;;312        {
;;;313            RCCAPB2->APB2_CFG &= ~APB2_CFG_ENAPB;
000008  6808              LDR      r0,[r1,#0]
00000a  d001              BEQ      |L11.16|
00000c  4310              ORRS     r0,r0,r2              ;309
00000e  e000              B        |L11.18|
                  |L11.16|
000010  4390              BICS     r0,r0,r2
                  |L11.18|
000012  6008              STR      r0,[r1,#0]            ;309
;;;314        }
;;;315    }
000014  4770              BX       lr
;;;316    
                          ENDP
000016  0000              DCW      0x0000
                  |L11.24|
                          DCD      0x40022000
                          AREA ||i.RCC_APB2Config||, CODE, READONLY, ALIGN=2
                  RCC_APB2Config PROC
;;;539     */
;;;540    void RCC_APB2Config ( RCC_PCLK_TypeDef RCC_APB2CLK )
000000  4904              LDR      r1,|L12.20|
;;;541    {
;;;542        
;;;543        assert_param ( IS_RCC_PCLK ( RCC_APB2CLK ) );
;;;544    
;;;545        RCCAPB2->APB2_CFG &= ~ ( ( uint32_t ) APB2_CFG_CLKDIV );
000002  680a              LDR      r2,[r1,#0]
000004  2307              MOVS     r3,#7
000006  051b              LSLS     r3,r3,#20
000008  439a              BICS     r2,r2,r3
00000a  600a              STR      r2,[r1,#0]
;;;546        RCCAPB2->APB2_CFG |= RCC_APB2CLK;
00000c  680a              LDR      r2,[r1,#0]
00000e  4302              ORRS     r2,r2,r0
000010  600a              STR      r2,[r1,#0]
;;;547    }
000012  4770              BX       lr
;;;548    
                          ENDP
                  |L12.20|
                          DCD      0x40022000
                          AREA ||i.RCC_APB2PeriphClockCmd||, CODE, READONLY, ALIGN=2
                  RCC_APB2PeriphClockCmd PROC
;;;823      */
;;;824    void RCC_APB2PeriphClockCmd ( uint32_t RCC_APB2Periph, FunctionalState NewState )
000000  4a04              LDR      r2,|L13.20|
;;;825    {
;;;826        
;;;827        assert_param ( IS_RCC_APB2PERIPH ( RCC_APB2Periph ) );
;;;828    
;;;829        if ( NewState != DISABLE )
000002  2900              CMP      r1,#0
;;;830        {
;;;831            RCCAPB2->APB2_CFG |= RCC_APB2Periph;
;;;832        }
;;;833        else
;;;834        {
;;;835            RCCAPB2->APB2_CFG &= ~RCC_APB2Periph;
000004  6811              LDR      r1,[r2,#0]
000006  d001              BEQ      |L13.12|
000008  4301              ORRS     r1,r1,r0              ;831
00000a  e000              B        |L13.14|
                  |L13.12|
00000c  4381              BICS     r1,r1,r0
                  |L13.14|
00000e  6011              STR      r1,[r2,#0]            ;831
;;;836        }
;;;837    }
000010  4770              BX       lr
;;;838    
                          ENDP
000012  0000              DCW      0x0000
                  |L13.20|
                          DCD      0x40022000
                          AREA ||i.RCC_APB2PeriphResetCmd||, CODE, READONLY, ALIGN=2
                  RCC_APB2PeriphResetCmd PROC
;;;951     */
;;;952    void RCC_APB2PeriphResetCmd ( uint32_t RCC_APB2Periph, FunctionalState NewState )
000000  4a04              LDR      r2,|L14.20|
;;;953    {
;;;954        
;;;955        assert_param ( IS_RCC_APB2PERIPH ( RCC_APB2Periph ) );
;;;956    
;;;957        if ( NewState != DISABLE )
000002  2900              CMP      r1,#0
;;;958        {
;;;959            RCCAPB2->APB2_RST |= RCC_APB2Periph;
;;;960        }
;;;961        else
;;;962        {
;;;963            RCCAPB2->APB2_RST &= ~RCC_APB2Periph;
000004  6851              LDR      r1,[r2,#4]
000006  d001              BEQ      |L14.12|
000008  4301              ORRS     r1,r1,r0              ;959
00000a  e000              B        |L14.14|
                  |L14.12|
00000c  4381              BICS     r1,r1,r0
                  |L14.14|
00000e  6051              STR      r1,[r2,#4]            ;959
;;;964        }
;;;965    }
000010  4770              BX       lr
;;;966    
                          ENDP
000012  0000              DCW      0x0000
                  |L14.20|
                          DCD      0x40022000
                          AREA ||i.RCC_BTMCLKConfig||, CODE, READONLY, ALIGN=2
                  RCC_BTMCLKConfig PROC
;;;698     */
;;;699    void RCC_BTMCLKConfig ( RCC_BTMCLKSource_TypeDef RCC_BTMCLKSource )
000000  b500              PUSH     {lr}
;;;700    {
000002  4602              MOV      r2,r0
;;;701        RCC_Unlock ( 0xFF );
000004  20ff              MOVS     r0,#0xff
000006  f7fffffe          BL       RCC_Unlock
;;;702        
;;;703        assert_param ( RCC_BTMCLKSOURCE ( RCC_BTMCLKSource ) );
;;;704    
;;;705        RCC->RCC_CFG1 &= ~ ( ( uint32_t ) RCC_CFG1_BTMCLKSEL );
00000a  4904              LDR      r1,|L15.28|
00000c  6988              LDR      r0,[r1,#0x18]
00000e  0840              LSRS     r0,r0,#1
000010  0040              LSLS     r0,r0,#1
000012  6188              STR      r0,[r1,#0x18]
;;;706        RCC->RCC_CFG1 |= ( uint32_t ) ( RCC_BTMCLKSource );
000014  698b              LDR      r3,[r1,#0x18]
000016  4313              ORRS     r3,r3,r2
000018  618b              STR      r3,[r1,#0x18]
;;;707    }
00001a  bd00              POP      {pc}
;;;708    
                          ENDP
                  |L15.28|
                          DCD      0x40003000
                          AREA ||i.RCC_DeInit||, CODE, READONLY, ALIGN=2
                  RCC_DeInit PROC
;;;45      */
;;;46     void RCC_DeInit ( void )
000000  4805              LDR      r0,|L16.24|
;;;47     {
;;;48         
;;;49         RCC->RCC_KEY = 0x40;
000002  2140              MOVS     r1,#0x40
000004  60c1              STR      r1,[r0,#0xc]
;;;50     
;;;51         
;;;52         RCC->RCC_CFG0 = ( uint32_t ) 0x00001040;
000006  2141              MOVS     r1,#0x41
000008  0189              LSLS     r1,r1,#6
00000a  6141              STR      r1,[r0,#0x14]
;;;53     
;;;54         
;;;55         RCC->RCC_CFG1 = ( uint32_t ) 0x00000000;
00000c  2100              MOVS     r1,#0
00000e  6181              STR      r1,[r0,#0x18]
;;;56     
;;;57     #if defined(SC32f10xx)
;;;58         
;;;59         RCC->PLL_CFG = ( uint32_t ) 0x00000000;
000010  61c1              STR      r1,[r0,#0x1c]
;;;60     #endif
;;;61     
;;;62         
;;;63         RCC->NMI_CFG = ( uint32_t ) 0x00000000;
000012  62c1              STR      r1,[r0,#0x2c]
;;;64     
;;;65     }
000014  4770              BX       lr
;;;66     
                          ENDP
000016  0000              DCW      0x0000
                  |L16.24|
                          DCD      0x40003000
                          AREA ||i.RCC_GetClocksFreq||, CODE, READONLY, ALIGN=2
                  RCC_GetClocksFreq PROC
;;;554      */
;;;555    void RCC_GetClocksFreq ( RCC_ClocksTypeDef* RCC_Clocks )
000000  b5f8              PUSH     {r3-r7,lr}
;;;556    {
;;;557        uint32_t  tmp;
;;;558    
;;;559    #if defined(SC32f10xx)
;;;560        uint32_t  pllp, pllsource, pllm, plln;
;;;561    #endif
;;;562    
;;;563        
;;;564        if ( ( RCC->RCC_CFG0 & RCC_CFG0_SYSCLKSW ) == RESET )
000002  4d26              LDR      r5,|L17.156|
000004  4604              MOV      r4,r0                 ;556
000006  6968              LDR      r0,[r5,#0x14]
000008  0601              LSLS     r1,r0,#24
;;;565        {
;;;566    #if defined(SC32f10xx)
;;;567            RCC_Clocks->SYSCLK_Frequency = HIRC_VALUE;
00000a  4825              LDR      r0,|L17.160|
00000c  d529              BPL      |L17.98|
;;;568    #elif defined(SC32f11xx) ||defined(SC32f12xx)
;;;569            RCC_Clocks->SYSCLK_Frequency = HIRC_VALUE / 2;
;;;570    #endif
;;;571        }
;;;572        else
;;;573        {
;;;574            switch ( RCC->RCC_CFG0 & RCC_CFG0_SYSCLKSEL )
00000e  6969              LDR      r1,[r5,#0x14]
000010  2203              MOVS     r2,#3
000012  0212              LSLS     r2,r2,#8
000014  4011              ANDS     r1,r1,r2
000016  d00c              BEQ      |L17.50|
;;;575            {
;;;576            case RCC_SYSCLKSource_HXT:   
;;;577                RCC_Clocks->SYSCLK_Frequency = HXT_VALUE;
000018  1042              ASRS     r2,r0,#1
00001a  39ff              SUBS     r1,r1,#0xff
00001c  1e49              SUBS     r1,r1,#1
00001e  d006              BEQ      |L17.46|
000020  39ff              SUBS     r1,r1,#0xff           ;574
000022  1e49              SUBS     r1,r1,#1              ;574
000024  d00b              BEQ      |L17.62|
000026  39ff              SUBS     r1,r1,#0xff           ;574
000028  2901              CMP      r1,#1                 ;574
00002a  d11b              BNE      |L17.100|
00002c  e004              B        |L17.56|
                  |L17.46|
;;;578                break;
00002e  6022              STR      r2,[r4,#0]
000030  e018              B        |L17.100|
                  |L17.50|
;;;579            case RCC_SYSCLKSource_LIRC:   
;;;580                RCC_Clocks->SYSCLK_Frequency = LIRC_VALUE;
000032  207d              MOVS     r0,#0x7d
000034  0200              LSLS     r0,r0,#8
;;;581                break;
000036  e014              B        |L17.98|
                  |L17.56|
;;;582            case RCC_SYSCLKSource_LXT:   
;;;583                RCC_Clocks->SYSCLK_Frequency = LXT_VALUE;
000038  2001              MOVS     r0,#1
00003a  03c0              LSLS     r0,r0,#15
;;;584                break;
00003c  e011              B        |L17.98|
                  |L17.62|
;;;585    #if defined(SC32f11xx) ||defined(SC32f12xx)
;;;586            case RCC_SYSCLKSource_HIRC_2:   
;;;587                RCC_Clocks->SYSCLK_Frequency = HIRC_VALUE;
;;;588                break;
;;;589    #elif defined(SC32f10xx)
;;;590            case RCC_SYSCLKSource_PLLRCLK:   
;;;591                if ( ( RCC->PLL_CFG & PLL_CFG_PLLCLKSEL ) == RESET ) 
00003e  69e9              LDR      r1,[r5,#0x1c]
000040  0209              LSLS     r1,r1,#8
000042  d500              BPL      |L17.70|
;;;592                {
;;;593                    pllsource = HIRC_VALUE;
;;;594                }
;;;595                else   
;;;596                {
;;;597                    pllsource = HXT_VALUE;
000044  4610              MOV      r0,r2
                  |L17.70|
;;;598                }
;;;599    
;;;600                pllm = ( ( RCC->PLL_CFG & PLL_CFG_MDIVM ) >> PLL_CFG_MDIVM_Pos );
000046  69e9              LDR      r1,[r5,#0x1c]
;;;601                plln = ( ( RCC->PLL_CFG & PLL_CFG_NDIVN ) >> PLL_CFG_NDIVN_Pos );
000048  69ea              LDR      r2,[r5,#0x1c]
;;;602                pllp = ( ( RCC->PLL_CFG & PLL_CFG_PDIVP ) >> PLL_CFG_PDIVP_Pos );
;;;603    
;;;604                RCC_Clocks->SYSCLK_Frequency = ( ( ( pllsource / pllm ) * plln ) >> ( pllp + 1 ) );
;;;605                break;
;;;606    #endif
;;;607            }
;;;608        }
;;;609    
;;;610        
;;;611        tmp = ( ( RCCAHB->AHB_CFG & AHB_CFG_CLKDIV ) >> AHB_CFG_CLKDIV_Pos );
;;;612        RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> tmp;
;;;613    
;;;614        
;;;615        tmp = ( ( RCCAPB0->APB0_CFG & APB0_CFG_CLKDIV ) >> APB0_CFG_CLKDIV_Pos );
;;;616        RCC_Clocks->PCLK0_Frequency = RCC_Clocks->HCLK_Frequency >> tmp;
;;;617    
;;;618        
;;;619        tmp = ( ( RCCAPB1->APB1_CFG & APB1_CFG_CLKDIV ) >> APB1_CFG_CLKDIV_Pos );
;;;620        RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> tmp;
;;;621    
;;;622        
;;;623        tmp = ( ( RCCAPB2->APB2_CFG & APB2_CFG_CLKDIV ) >> APB2_CFG_CLKDIV_Pos );
;;;624        RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> tmp;
;;;625    }
00004a  02c9              LSLS     r1,r1,#11
00004c  0ec9              LSRS     r1,r1,#27
00004e  0412              LSLS     r2,r2,#16             ;601
000050  0e17              LSRS     r7,r2,#24             ;601
000052  69ea              LDR      r2,[r5,#0x1c]         ;602
000054  0796              LSLS     r6,r2,#30             ;602
000056  0fb6              LSRS     r6,r6,#30             ;602
000058  f7fffffe          BL       __aeabi_uidivmod
00005c  4378              MULS     r0,r7,r0              ;604
00005e  1c76              ADDS     r6,r6,#1              ;604
000060  40f0              LSRS     r0,r0,r6              ;604
                  |L17.98|
000062  6020              STR      r0,[r4,#0]            ;604
                  |L17.100|
000064  6828              LDR      r0,[r5,#0]            ;611
000066  0240              LSLS     r0,r0,#9
000068  0f41              LSRS     r1,r0,#29
00006a  6820              LDR      r0,[r4,#0]            ;612
00006c  40c8              LSRS     r0,r0,r1              ;612
00006e  490d              LDR      r1,|L17.164|
000070  6060              STR      r0,[r4,#4]            ;615
000072  6809              LDR      r1,[r1,#0]            ;615
000074  4602              MOV      r2,r0
000076  0249              LSLS     r1,r1,#9
000078  0f49              LSRS     r1,r1,#29
00007a  40ca              LSRS     r2,r2,r1              ;616
00007c  490a              LDR      r1,|L17.168|
00007e  60a2              STR      r2,[r4,#8]            ;619
000080  6809              LDR      r1,[r1,#0]            ;619
000082  4602              MOV      r2,r0
000084  0249              LSLS     r1,r1,#9
000086  0f49              LSRS     r1,r1,#29
000088  40ca              LSRS     r2,r2,r1              ;620
00008a  4908              LDR      r1,|L17.172|
00008c  60e2              STR      r2,[r4,#0xc]          ;623
00008e  6809              LDR      r1,[r1,#0]            ;623
000090  0249              LSLS     r1,r1,#9
000092  0f49              LSRS     r1,r1,#29
000094  40c8              LSRS     r0,r0,r1              ;624
000096  6120              STR      r0,[r4,#0x10]         ;624
000098  bdf8              POP      {r3-r7,pc}
;;;626    
                          ENDP
00009a  0000              DCW      0x0000
                  |L17.156|
                          DCD      0x40003000
                  |L17.160|
                          DCD      0x01e84800
                  |L17.164|
                          DCD      0x40020000
                  |L17.168|
                          DCD      0x40021000
                  |L17.172|
                          DCD      0x40022000
                          AREA ||i.RCC_GetFlagStatus||, CODE, READONLY, ALIGN=2
                  RCC_GetFlagStatus PROC
;;;1142    */
;;;1143   FlagStatus RCC_GetFlagStatus ( uint32_t RCC_FLAG )
000000  4903              LDR      r1,|L18.16|
;;;1144   {
;;;1145       
;;;1146       assert_param ( IS_GET_RCC_FLAG ( RCC_FLAG ) );
;;;1147   
;;;1148       if( ( RCC->RCC_STS & RCC_FLAG ) != ( uint32_t ) RESET )
000002  6a09              LDR      r1,[r1,#0x20]
000004  4201              TST      r1,r0
000006  d001              BEQ      |L18.12|
;;;1149       {
;;;1150           return ( SET );
000008  2001              MOVS     r0,#1
;;;1151       }
;;;1152       return ( RESET );
;;;1153   }
00000a  4770              BX       lr
                  |L18.12|
00000c  2000              MOVS     r0,#0                 ;1152
00000e  4770              BX       lr
;;;1154   
                          ENDP
                  |L18.16|
                          DCD      0x40003000
                          AREA ||i.RCC_GetSYSCLKSource||, CODE, READONLY, ALIGN=2
                  RCC_GetSYSCLKSource PROC
;;;446      */
;;;447    RCC_SYSCLKSource_TypeDef RCC_GetSYSCLKSource ( void )
000000  4805              LDR      r0,|L19.24|
;;;448    {
;;;449        if ( ( RCC->RCC_CFG0 & RCC_CFG0_SYSCLKSW ) != RESET )
000002  6941              LDR      r1,[r0,#0x14]
000004  0609              LSLS     r1,r1,#24
000006  d504              BPL      |L19.18|
;;;450        {
;;;451            return ( ( RCC_SYSCLKSource_TypeDef ) ( RCC->RCC_CFG0 & RCC_CFG0_SYSCLKSEL ) );
000008  6940              LDR      r0,[r0,#0x14]
00000a  2103              MOVS     r1,#3
00000c  0209              LSLS     r1,r1,#8
00000e  4008              ANDS     r0,r0,r1
;;;452        }
;;;453        else
;;;454        {
;;;455    #if defined (SC32f10xx)
;;;456            return RCC_SYSCLKSource_HIRC;
;;;457    #elif defined (SC32f11xx) ||  defined (SC32f12xx)
;;;458            return RCC_SYSCLKSource_HIRC_2;
;;;459    #endif
;;;460        }
;;;461    
;;;462    }
000010  4770              BX       lr
                  |L19.18|
000012  4802              LDR      r0,|L19.28|
000014  4770              BX       lr
;;;463    
                          ENDP
000016  0000              DCW      0x0000
                  |L19.24|
                          DCD      0x40003000
                  |L19.28|
                          DCD      0x0000ff7f
                          AREA ||i.RCC_HCLKConfig||, CODE, READONLY, ALIGN=2
                  RCC_HCLKConfig PROC
;;;473     */
;;;474    void RCC_HCLKConfig ( RCC_HCLK_TypeDef RCC_HCLK )
000000  4904              LDR      r1,|L20.20|
;;;475    {
;;;476        
;;;477        assert_param ( IS_RCC_HCLK ( RCC_HCLK ) );
;;;478    
;;;479        RCCAHB->AHB_CFG &= ( uint32_t ) ~ ( AHB_CFG_CLKDIV );
000002  680a              LDR      r2,[r1,#0]
000004  2307              MOVS     r3,#7
000006  051b              LSLS     r3,r3,#20
000008  439a              BICS     r2,r2,r3
00000a  600a              STR      r2,[r1,#0]
;;;480        RCCAHB->AHB_CFG |= RCC_HCLK;
00000c  680a              LDR      r2,[r1,#0]
00000e  4302              ORRS     r2,r2,r0
000010  600a              STR      r2,[r1,#0]
;;;481    }
000012  4770              BX       lr
;;;482    
                          ENDP
                  |L20.20|
                          DCD      0x40003000
                          AREA ||i.RCC_HIRCCmd||, CODE, READONLY, ALIGN=2
                  RCC_HIRCCmd PROC
;;;118      */
;;;119    void RCC_HIRCCmd ( FunctionalState NewState )
000000  b500              PUSH     {lr}
;;;120    {
000002  4602              MOV      r2,r0
;;;121        RCC_Unlock ( 0xFF );
000004  20ff              MOVS     r0,#0xff
000006  f7fffffe          BL       RCC_Unlock
;;;122        if ( NewState != DISABLE )
;;;123        {
;;;124            
;;;125            RCC->RCC_CFG0 |= RCC_CFG0_HIRCEN;
00000a  4905              LDR      r1,|L21.32|
00000c  2340              MOVS     r3,#0x40
;;;126        }
;;;127        else
;;;128        {
;;;129            
;;;130            RCC->RCC_CFG0 &= ( uint32_t ) ~ ( ( uint32_t ) RCC_CFG0_HIRCEN );
00000e  6948              LDR      r0,[r1,#0x14]
000010  2a00              CMP      r2,#0                 ;122
000012  d001              BEQ      |L21.24|
000014  4318              ORRS     r0,r0,r3              ;125
000016  e000              B        |L21.26|
                  |L21.24|
000018  4398              BICS     r0,r0,r3
                  |L21.26|
00001a  6148              STR      r0,[r1,#0x14]         ;125
;;;131        }
;;;132    }
00001c  bd00              POP      {pc}
;;;133    
                          ENDP
00001e  0000              DCW      0x0000
                  |L21.32|
                          DCD      0x40003000
                          AREA ||i.RCC_HXTCmd||, CODE, READONLY, ALIGN=2
                  RCC_HXTCmd PROC
;;;96       */
;;;97     void RCC_HXTCmd ( FunctionalState NewState )
000000  b500              PUSH     {lr}
;;;98     {
000002  4602              MOV      r2,r0
;;;99         RCC_Unlock ( 0xFF );
000004  20ff              MOVS     r0,#0xff
000006  f7fffffe          BL       RCC_Unlock
;;;100        if ( NewState != DISABLE )
;;;101        {
;;;102            
;;;103            RCC->RCC_CFG0 |= RCC_CFG0_HXTEN;
00000a  4905              LDR      r1,|L22.32|
00000c  2320              MOVS     r3,#0x20
;;;104        }
;;;105        else
;;;106        {
;;;107            
;;;108            RCC->RCC_CFG0 &= ( uint32_t ) ~ ( ( uint32_t ) RCC_CFG0_HXTEN );
00000e  6948              LDR      r0,[r1,#0x14]
000010  2a00              CMP      r2,#0                 ;100
000012  d001              BEQ      |L22.24|
000014  4318              ORRS     r0,r0,r3              ;103
000016  e000              B        |L22.26|
                  |L22.24|
000018  4398              BICS     r0,r0,r3
                  |L22.26|
00001a  6148              STR      r0,[r1,#0x14]         ;103
;;;109        }
;;;110    }
00001c  bd00              POP      {pc}
;;;111    
                          ENDP
00001e  0000              DCW      0x0000
                  |L22.32|
                          DCD      0x40003000
                          AREA ||i.RCC_ITConfig||, CODE, READONLY, ALIGN=2
                  RCC_ITConfig PROC
;;;1116     */
;;;1117   void RCC_ITConfig ( FunctionalState NewState )
000000  b500              PUSH     {lr}
;;;1118   {
000002  4602              MOV      r2,r0
;;;1119       RCC_Unlock ( 0xFF );
000004  20ff              MOVS     r0,#0xff
000006  f7fffffe          BL       RCC_Unlock
;;;1120       if ( NewState != DISABLE )
;;;1121       {
;;;1122           RCC->RCC_CFG0 |= RCC_CFG0_INTEN;
00000a  4905              LDR      r1,|L23.32|
00000c  13cb              ASRS     r3,r1,#15
;;;1123       }
;;;1124       else
;;;1125       {
;;;1126           RCC->RCC_CFG0 &= ( uint32_t ) ~ ( ( uint32_t ) RCC_CFG0_INTEN );
00000e  6948              LDR      r0,[r1,#0x14]
000010  2a00              CMP      r2,#0                 ;1120
000012  d001              BEQ      |L23.24|
000014  4318              ORRS     r0,r0,r3              ;1122
000016  e000              B        |L23.26|
                  |L23.24|
000018  4398              BICS     r0,r0,r3
                  |L23.26|
00001a  6148              STR      r0,[r1,#0x14]         ;1122
;;;1127       }
;;;1128   }
00001c  bd00              POP      {pc}
;;;1129   
                          ENDP
00001e  0000              DCW      0x0000
                  |L23.32|
                          DCD      0x40003000
                          AREA ||i.RCC_LCDLEDCLKConfig||, CODE, READONLY, ALIGN=2
                  RCC_LCDLEDCLKConfig PROC
;;;681     */
;;;682    void RCC_LCDLEDCLKConfig ( RCC_LCDLEDCLKSource_TypeDef RCC_LCDLEDCLKSource )
000000  b500              PUSH     {lr}
;;;683    {
000002  4603              MOV      r3,r0
;;;684        RCC_Unlock ( 0xFF );
000004  20ff              MOVS     r0,#0xff
000006  f7fffffe          BL       RCC_Unlock
;;;685        
;;;686        assert_param ( RCC_LCDLEDCLKSOURCE ( RCC_LCDLEDCLKSource ) );
;;;687    
;;;688        RCC->RCC_CFG1 &= ~ ( ( uint32_t ) RCC_CFG1_LCDCLKSEL );
00000a  4904              LDR      r1,|L24.28|
00000c  698a              LDR      r2,[r1,#0x18]
00000e  2002              MOVS     r0,#2
000010  4382              BICS     r2,r2,r0
000012  618a              STR      r2,[r1,#0x18]
;;;689        RCC->RCC_CFG1 |= ( uint32_t ) ( RCC_LCDLEDCLKSource );
000014  698a              LDR      r2,[r1,#0x18]
000016  431a              ORRS     r2,r2,r3
000018  618a              STR      r2,[r1,#0x18]
;;;690    }
00001a  bd00              POP      {pc}
;;;691    
                          ENDP
                  |L24.28|
                          DCD      0x40003000
                          AREA ||i.RCC_LIRCCmd||, CODE, READONLY, ALIGN=2
                  RCC_LIRCCmd PROC
;;;162      */
;;;163    void RCC_LIRCCmd ( FunctionalState NewState )
000000  b500              PUSH     {lr}
;;;164    {
000002  4602              MOV      r2,r0
;;;165        RCC_Unlock ( 0xFF );
000004  20ff              MOVS     r0,#0xff
000006  f7fffffe          BL       RCC_Unlock
;;;166        if ( NewState != DISABLE )
;;;167        {
;;;168            
;;;169            RCC->RCC_CFG0 |= RCC_CFG0_LIRCEN;
00000a  4905              LDR      r1,|L25.32|
00000c  2302              MOVS     r3,#2
;;;170        }
;;;171        else
;;;172        {
;;;173            
;;;174            RCC->RCC_CFG0 &= ( uint32_t ) ~ ( ( uint32_t ) RCC_CFG0_LIRCEN );
00000e  6948              LDR      r0,[r1,#0x14]
000010  2a00              CMP      r2,#0                 ;166
000012  d001              BEQ      |L25.24|
000014  4318              ORRS     r0,r0,r3              ;169
000016  e000              B        |L25.26|
                  |L25.24|
000018  4398              BICS     r0,r0,r3
                  |L25.26|
00001a  6148              STR      r0,[r1,#0x14]         ;169
;;;175        }
;;;176    }
00001c  bd00              POP      {pc}
;;;177    
                          ENDP
00001e  0000              DCW      0x0000
                  |L25.32|
                          DCD      0x40003000
                          AREA ||i.RCC_LXTCmd||, CODE, READONLY, ALIGN=2
                  RCC_LXTCmd PROC
;;;140      */
;;;141    void RCC_LXTCmd ( FunctionalState NewState )
000000  b500              PUSH     {lr}
;;;142    {
000002  4602              MOV      r2,r0
;;;143        RCC_Unlock ( 0xFF );
000004  20ff              MOVS     r0,#0xff
000006  f7fffffe          BL       RCC_Unlock
;;;144        if ( NewState != DISABLE )
;;;145        {
;;;146            
;;;147            RCC->RCC_CFG0 |= RCC_CFG0_LXTEN;
00000a  4905              LDR      r1,|L26.32|
00000c  2a00              CMP      r2,#0                 ;144
;;;148        }
;;;149        else
;;;150        {
;;;151            
;;;152            RCC->RCC_CFG0 &= ( uint32_t ) ~ ( ( uint32_t ) RCC_CFG0_LXTEN );
00000e  6948              LDR      r0,[r1,#0x14]
000010  d002              BEQ      |L26.24|
000012  2201              MOVS     r2,#1                 ;147
000014  4310              ORRS     r0,r0,r2              ;147
000016  e001              B        |L26.28|
                  |L26.24|
000018  0840              LSRS     r0,r0,#1
00001a  0040              LSLS     r0,r0,#1
                  |L26.28|
00001c  6148              STR      r0,[r1,#0x14]         ;147
;;;153        }
;;;154    }
00001e  bd00              POP      {pc}
;;;155    
                          ENDP
                  |L26.32|
                          DCD      0x40003000
                          AREA ||i.RCC_NMICmd||, CODE, READONLY, ALIGN=2
                  RCC_NMICmd PROC
;;;981     */
;;;982    void RCC_NMICmd ( uint32_t RCC_NMIPeriph, FunctionalState NewState )
000000  b510              PUSH     {r4,lr}
;;;983    {
;;;984        uint32_t temp;
;;;985        
;;;986        assert_param ( IS_RCC_NMIPeriph ( RCC_NMIPeriph ) );
;;;987    
;;;988        temp = RCC->NMI_CFG;
000002  4b05              LDR      r3,|L27.24|
000004  6ada              LDR      r2,[r3,#0x2c]
;;;989    
;;;990        temp &= ( ~RCC_NMIPeriph );
;;;991    
;;;992        if ( NewState != DISABLE )
;;;993        {
;;;994            temp |= 0xA05F0000 | RCC_NMIPeriph;
000006  4c05              LDR      r4,|L27.28|
000008  4382              BICS     r2,r2,r0              ;990
00000a  2900              CMP      r1,#0                 ;992
00000c  d000              BEQ      |L27.16|
00000e  4302              ORRS     r2,r2,r0
                  |L27.16|
;;;995        }
;;;996        else
;;;997        {
;;;998            temp |= 0xA05F0000;
000010  4322              ORRS     r2,r2,r4
;;;999        }
;;;1000       RCC->NMI_CFG = temp;
000012  62da              STR      r2,[r3,#0x2c]
;;;1001   }
000014  bd10              POP      {r4,pc}
;;;1002   
                          ENDP
000016  0000              DCW      0x0000
                  |L27.24|
                          DCD      0x40003000
                  |L27.28|
                          DCD      0xa05f0000
                          AREA ||i.RCC_PLLCmd||, CODE, READONLY, ALIGN=2
                  RCC_PLLCmd PROC
;;;185      */
;;;186    void RCC_PLLCmd ( FunctionalState NewState )
000000  b500              PUSH     {lr}
;;;187    {
000002  4602              MOV      r2,r0
;;;188        RCC_Unlock ( 0xFF );
000004  20ff              MOVS     r0,#0xff
000006  f7fffffe          BL       RCC_Unlock
;;;189        
;;;190        assert_param ( IS_FUNCTIONAL_STATE ( NewState ) );
;;;191    
;;;192        if ( NewState != DISABLE )
;;;193        {
;;;194            
;;;195            RCC->PLL_CFG |= PLL_CFG_PLLON;
00000a  4905              LDR      r1,|L28.32|
00000c  2380              MOVS     r3,#0x80
;;;196        }
;;;197        else
;;;198        {
;;;199            
;;;200            RCC->PLL_CFG &= ( uint32_t ) ~ ( ( uint32_t ) PLL_CFG_PLLON );
00000e  69c8              LDR      r0,[r1,#0x1c]
000010  2a00              CMP      r2,#0                 ;192
000012  d001              BEQ      |L28.24|
000014  4318              ORRS     r0,r0,r3              ;195
000016  e000              B        |L28.26|
                  |L28.24|
000018  4398              BICS     r0,r0,r3
                  |L28.26|
00001a  61c8              STR      r0,[r1,#0x1c]         ;195
;;;201        }
;;;202    }
00001c  bd00              POP      {pc}
;;;203    
                          ENDP
00001e  0000              DCW      0x0000
                  |L28.32|
                          DCD      0x40003000
                          AREA ||i.RCC_PLLConfig||, CODE, READONLY, ALIGN=2
                  RCC_PLLConfig PROC
;;;326     */
;;;327    void RCC_PLLConfig ( RCC_PLLCLKSource_TypeDef RCC_PLLCLKSource, RLL_Factor_TypeDef* RLL_Factor )
000000  b530              PUSH     {r4,r5,lr}
;;;328    {
000002  4604              MOV      r4,r0
000004  460b              MOV      r3,r1
;;;329        RCC_Unlock ( 0xFF );
000006  20ff              MOVS     r0,#0xff
000008  f7fffffe          BL       RCC_Unlock
;;;330        uint32_t tmpreg;
;;;331        
;;;332        
;;;333        assert_param ( RCC_PLLCLKSOURCE ( RCC_PLLCLKSource ) );
;;;334    
;;;335        if ( 2 * RLL_Factor->PLLN )
00000c  6859              LDR      r1,[r3,#4]
;;;336            tmpreg = RCC->PLL_CFG;
00000e  4d08              LDR      r5,|L29.48|
000010  0048              LSLS     r0,r1,#1              ;335
000012  d000              BEQ      |L29.22|
000014  69ea              LDR      r2,[r5,#0x1c]
                  |L29.22|
;;;337    
;;;338        tmpreg &= ( uint32_t ) ~ ( PLL_CFG_PLLCLKSEL | PLL_CFG_MDIVM | PLL_CFG_NDIVN | PLL_CFG_PDIVP );
000016  4807              LDR      r0,|L29.52|
000018  4002              ANDS     r2,r2,r0
;;;339    
;;;340        tmpreg |= ( uint32_t ) ( RCC_PLLCLKSource | ( RLL_Factor->PLLM << PLL_CFG_MDIVM_Pos ) |
00001a  8818              LDRH     r0,[r3,#0]
00001c  0400              LSLS     r0,r0,#16
00001e  0209              LSLS     r1,r1,#8
000020  4308              ORRS     r0,r0,r1
000022  6899              LDR      r1,[r3,#8]
000024  4321              ORRS     r1,r1,r4
000026  4308              ORRS     r0,r0,r1
000028  4310              ORRS     r0,r0,r2
;;;341                                 ( RLL_Factor->PLLN << PLL_CFG_NDIVN_Pos ) | ( RLL_Factor->PLLP << PLL_CFG_PDIVP_Pos ) );
;;;342    
;;;343        RCC->PLL_CFG = tmpreg;
00002a  61e8              STR      r0,[r5,#0x1c]
;;;344    }
00002c  bd30              POP      {r4,r5,pc}
;;;345    #endif
                          ENDP
00002e  0000              DCW      0x0000
                  |L29.48|
                          DCD      0x40003000
                  |L29.52|
                          DCD      0xff6000fc
                          AREA ||i.RCC_PLLRCmd||, CODE, READONLY, ALIGN=2
                  RCC_PLLRCmd PROC
;;;210      */
;;;211    void RCC_PLLRCmd ( FunctionalState NewState )
000000  b500              PUSH     {lr}
;;;212    {
000002  4602              MOV      r2,r0
;;;213        RCC_Unlock ( 0xFF );
000004  20ff              MOVS     r0,#0xff
000006  f7fffffe          BL       RCC_Unlock
;;;214        
;;;215        assert_param ( IS_FUNCTIONAL_STATE ( NewState ) );
;;;216    
;;;217        if ( NewState != DISABLE )
;;;218        {
;;;219            RCC->PLL_CFG |= PLL_CFG_PLLREN;
00000a  4905              LDR      r1,|L30.32|
00000c  2340              MOVS     r3,#0x40
;;;220        }
;;;221        else
;;;222        {
;;;223            RCC->PLL_CFG &= ( uint32_t ) ~ ( ( uint32_t ) PLL_CFG_PLLREN );
00000e  69c8              LDR      r0,[r1,#0x1c]
000010  2a00              CMP      r2,#0                 ;217
000012  d001              BEQ      |L30.24|
000014  4318              ORRS     r0,r0,r3              ;219
000016  e000              B        |L30.26|
                  |L30.24|
000018  4398              BICS     r0,r0,r3
                  |L30.26|
00001a  61c8              STR      r0,[r1,#0x1c]         ;219
;;;224        }
;;;225    }
00001c  bd00              POP      {pc}
;;;226    #endif
                          ENDP
00001e  0000              DCW      0x0000
                  |L30.32|
                          DCD      0x40003000
                          AREA ||i.RCC_SYSCLKConfig||, CODE, READONLY, ALIGN=2
                  RCC_SYSCLKConfig PROC
;;;375     */
;;;376    ErrorStatus RCC_SYSCLKConfig ( RCC_SYSCLKSource_TypeDef RCC_SYSCLKSource )
000000  b5f8              PUSH     {r3-r7,lr}
;;;377    {
000002  4605              MOV      r5,r0
;;;378        uint32_t tmpreg;
;;;379        RCC_Unlock ( 0xFF );
000004  20ff              MOVS     r0,#0xff
000006  f7fffffe          BL       RCC_Unlock
;;;380    
;;;381    
;;;382        
;;;383        assert_param ( IS_RCC_SYSCLKSOURCE ( RCC_SYSCLKSource ) );
;;;384        if ( RCC_SYSCLKSource != ( ( uint16_t ) ( ~RCC_CFG0_SYSCLKSW ) ) )
00000a  4820              LDR      r0,|L31.140|
;;;385        {
;;;386    
;;;387    #if defined(SC32f11xx)||defined(SC32f12xx)
;;;388            if ( RCC_SYSCLKSource == RCC_SYSCLKSource_HIRC )
;;;389            {
;;;390                RCC->RCC_CFG0 &= ~RCC_CFG0_WAIT_Msk;
;;;391                RCC->RCC_CFG0 |= RCC_WAIT_2;
;;;392            }
;;;393    #elif defined(SC32f10xx)
;;;394        uint32_t Multioperator = 1;
;;;395        for ( int i = 1; i <= ((RCC->PLL_CFG &0x03) + 1 ); i++ )
;;;396        {
;;;397            Multioperator *=  2;
;;;398        }
;;;399        if ( ( ( 2 * ((RCC->PLL_CFG &0xFF00)>>8) ) / Multioperator ) >= 64 )
;;;400        {
;;;401            RCC->RCC_CFG0 &= ~RCC_CFG0_WAIT_Msk;
00000c  2603              MOVS     r6,#3
;;;402            RCC->RCC_CFG0 |= RCC_WAIT_1;
00000e  2701              MOVS     r7,#1
000010  0336              LSLS     r6,r6,#12             ;401
000012  033f              LSLS     r7,r7,#12
000014  4c1e              LDR      r4,|L31.144|
000016  4285              CMP      r5,r0                 ;384
000018  d026              BEQ      |L31.104|
00001a  2101              MOVS     r1,#1                 ;394
00001c  4608              MOV      r0,r1                 ;395
00001e  e001              B        |L31.36|
                  |L31.32|
000020  0049              LSLS     r1,r1,#1              ;397
000022  1c40              ADDS     r0,r0,#1              ;397
                  |L31.36|
000024  69e2              LDR      r2,[r4,#0x1c]         ;395
000026  0792              LSLS     r2,r2,#30             ;395
000028  0f92              LSRS     r2,r2,#30             ;395
00002a  1c52              ADDS     r2,r2,#1              ;395
00002c  4282              CMP      r2,r0                 ;395
00002e  d2f7              BCS      |L31.32|
000030  69e0              LDR      r0,[r4,#0x1c]         ;399
000032  0400              LSLS     r0,r0,#16             ;399
000034  0e00              LSRS     r0,r0,#24             ;399
000036  0040              LSLS     r0,r0,#1              ;399
000038  f7fffffe          BL       __aeabi_uidivmod
00003c  2840              CMP      r0,#0x40              ;399
00003e  d305              BCC      |L31.76|
000040  6960              LDR      r0,[r4,#0x14]         ;401
000042  43b0              BICS     r0,r0,r6              ;401
000044  6160              STR      r0,[r4,#0x14]         ;401
000046  6960              LDR      r0,[r4,#0x14]
000048  4338              ORRS     r0,r0,r7
00004a  6160              STR      r0,[r4,#0x14]
                  |L31.76|
;;;403        }
;;;404    #endif
;;;405            tmpreg = RCC->RCC_CFG0;
00004c  6960              LDR      r0,[r4,#0x14]
;;;406    
;;;407            tmpreg &= ( uint32_t ) ~ ( RCC_CFG0_SYSCLKSEL | RCC_CFG0_SYSCLKSW );
00004e  2107              MOVS     r1,#7
000050  01c9              LSLS     r1,r1,#7
000052  4388              BICS     r0,r0,r1
;;;408    
;;;409            tmpreg |= ( uint32_t ) RCC_SYSCLKSource;
000054  4328              ORRS     r0,r0,r5
;;;410    
;;;411            RCC->RCC_CFG0 = tmpreg;
000056  6160              STR      r0,[r4,#0x14]
;;;412    
;;;413            RCC->RCC_CFG0 |= RCC_CFG0_SYSCLKSW;
000058  6960              LDR      r0,[r4,#0x14]
00005a  2180              MOVS     r1,#0x80
00005c  4308              ORRS     r0,r0,r1
00005e  6160              STR      r0,[r4,#0x14]
;;;414    
;;;415            if ( ( RCC->RCC_CFG0 & RCC_CFG0_SYSCLKSW ) != RESET )
000060  6960              LDR      r0,[r4,#0x14]
000062  0600              LSLS     r0,r0,#24
000064  d40d              BMI      |L31.130|
000066  e00e              B        |L31.134|
                  |L31.104|
;;;416                return SUCCESS;
;;;417            else
;;;418                return ERROR;
;;;419        }
;;;420        else
;;;421        {
;;;422            RCC->RCC_CFG0 &= ~RCC_CFG0_WAIT_Msk;
000068  6960              LDR      r0,[r4,#0x14]
00006a  43b0              BICS     r0,r0,r6
00006c  6160              STR      r0,[r4,#0x14]
;;;423            RCC->RCC_CFG0 |= RCC_WAIT_1;
00006e  6960              LDR      r0,[r4,#0x14]
000070  4338              ORRS     r0,r0,r7
000072  6160              STR      r0,[r4,#0x14]
;;;424            RCC->RCC_CFG0 &= ( uint32_t ) ~RCC_CFG0_SYSCLKSW;
000074  6961              LDR      r1,[r4,#0x14]
000076  2080              MOVS     r0,#0x80
000078  4381              BICS     r1,r1,r0
00007a  6161              STR      r1,[r4,#0x14]
;;;425    
;;;426            if ( ( RCC->RCC_CFG0 & RCC_CFG0_SYSCLKSW ) == RESET )
00007c  6960              LDR      r0,[r4,#0x14]
00007e  0600              LSLS     r0,r0,#24
000080  d401              BMI      |L31.134|
                  |L31.130|
;;;427                return SUCCESS;
000082  2000              MOVS     r0,#0
;;;428            else
;;;429                return ERROR;
;;;430        }
;;;431    }
000084  bdf8              POP      {r3-r7,pc}
                  |L31.134|
000086  2001              MOVS     r0,#1                 ;429
000088  bdf8              POP      {r3-r7,pc}
;;;432    
                          ENDP
00008a  0000              DCW      0x0000
                  |L31.140|
                          DCD      0x0000ff7f
                  |L31.144|
                          DCD      0x40003000
                          AREA ||i.RCC_SystickCLKConfig||, CODE, READONLY, ALIGN=2
                  RCC_SystickCLKConfig PROC
;;;1025    */
;;;1026   void RCC_SystickCLKConfig ( RCC_SysTickSource_TypeDef RCC_SysTickSource )
000000  b510              PUSH     {r4,lr}
;;;1027   {
;;;1028   
;;;1029       
;;;1030       assert_param ( IS_RCC_SYSTICKSOURCE ( RCC_SysTickSource ) );
;;;1031   
;;;1032       if ( RCC_SysTickSource == RCC_SysTickSource_HCLK )
;;;1033       {
;;;1034           SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk;
000002  4c0c              LDR      r4,|L32.52|
000004  2304              MOVS     r3,#4
000006  4602              MOV      r2,r0                 ;1027
000008  2801              CMP      r0,#1                 ;1032
00000a  d00e              BEQ      |L32.42|
;;;1035       }
;;;1036       else
;;;1037       {
;;;1038           RCC_Unlock ( 0xFF );
00000c  20ff              MOVS     r0,#0xff
00000e  f7fffffe          BL       RCC_Unlock
;;;1039           SysTick->CTRL &= ~SysTick_CTRL_CLKSOURCE_Msk;
000012  6920              LDR      r0,[r4,#0x10]
000014  4398              BICS     r0,r0,r3
000016  6120              STR      r0,[r4,#0x10]
;;;1040           RCC->RCC_CFG1 &= ~ ( ( uint32_t ) RCC_CFG1_STCLKSEL );
000018  4907              LDR      r1,|L32.56|
00001a  6988              LDR      r0,[r1,#0x18]
00001c  2360              MOVS     r3,#0x60
00001e  4398              BICS     r0,r0,r3
000020  6188              STR      r0,[r1,#0x18]
;;;1041           RCC->RCC_CFG1 |= ( uint32_t ) ( RCC_SysTickSource );
000022  6988              LDR      r0,[r1,#0x18]
000024  4310              ORRS     r0,r0,r2
000026  6188              STR      r0,[r1,#0x18]
;;;1042       }
;;;1043   }
000028  bd10              POP      {r4,pc}
                  |L32.42|
00002a  6920              LDR      r0,[r4,#0x10]         ;1034
00002c  4318              ORRS     r0,r0,r3              ;1034
00002e  6120              STR      r0,[r4,#0x10]         ;1034
000030  bd10              POP      {r4,pc}
;;;1044   
;;;1064   void RCC_SystickCmd ( FunctionalState NewState )
000000  4905              LDR      r1,|L33.24|
;;;1065   {
;;;1066       
;;;1067       assert_param ( IS_FUNCTIONAL_STATE ( NewState ) );
;;;1068   
;;;1069       if ( NewState != DISABLE )
000002  2800              CMP      r0,#0
;;;1070       {
;;;1071           SysTick->CTRL |= ( uint32_t ) ( SysTick_CTRL_ENABLE_Msk | SysTick_CTRL_TICKINT_Msk ); 
;;;1072       }
;;;1073       else
;;;1074       {
;;;1075           SysTick->CTRL &= ~ ( uint32_t ) ( SysTick_CTRL_ENABLE_Msk | SysTick_CTRL_TICKINT_Msk );
000004  6908              LDR      r0,[r1,#0x10]
000006  d002              BEQ      |L33.14|
000008  2203              MOVS     r2,#3                 ;1071
00000a  4310              ORRS     r0,r0,r2              ;1071
00000c  e001              B        |L33.18|
                  |L33.14|
00000e  0880              LSRS     r0,r0,#2
000010  0080              LSLS     r0,r0,#2
                  |L33.18|
000012  6108              STR      r0,[r1,#0x10]         ;1071
;;;1076       }
;;;1077   }
000014  4770              BX       lr
;;;1078   
;;;1085   FlagStatus RCC_SystickGetFlagStatus ( void )
000000  4803              LDR      r0,|L34.16|
;;;1086   {
;;;1087       if ( ( SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk ) != ( uint32_t ) RESET )
000002  6900              LDR      r0,[r0,#0x10]
000004  03c0              LSLS     r0,r0,#15
000006  d501              BPL      |L34.12|
;;;1088       {
;;;1089           return ( SET );
000008  2001              MOVS     r0,#1
;;;1090       }
;;;1091       return ( RESET );
;;;1092   }
00000a  4770              BX       lr
                  |L34.12|
00000c  2000              MOVS     r0,#0                 ;1091
00000e  4770              BX       lr
;;;1093   
;;;1049   void RCC_SystickSetCounter ( uint32_t Counter )
000000  4904              LDR      r1,|L35.20|
;;;1050   {
;;;1051       if ( ( Counter - 1UL ) <= SysTick_LOAD_RELOAD_Msk ) 
000002  1e40              SUBS     r0,r0,#1
000004  4288              CMP      r0,r1
000006  d803              BHI      |L35.16|
;;;1052       {
;;;1053           SysTick->LOAD = ( uint32_t ) ( Counter - 1UL ); 
000008  4903              LDR      r1,|L35.24|
00000a  6148              STR      r0,[r1,#0x14]
;;;1054           SysTick->VAL  = 0UL;   
00000c  2000              MOVS     r0,#0
00000e  6188              STR      r0,[r1,#0x18]
                  |L35.16|
;;;1055       }
;;;1056   }
000010  4770              BX       lr
;;;1057   
;;;77     ErrorStatus RCC_Unlock ( uint8_t TimeLimit )
000000  2840              CMP      r0,#0x40
;;;78     {
000002  d303              BCC      |L36.12|
;;;79         if ( TimeLimit >= 0x40 )
;;;80         {
;;;81             RCC->RCC_KEY = TimeLimit;
000004  4902              LDR      r1,|L36.16|
000006  60c8              STR      r0,[r1,#0xc]
;;;82             return SUCCESS;
000008  2000              MOVS     r0,#0
;;;83         }
;;;84         else
;;;85         {
;;;86             return ERROR;
;;;87         }
;;;88     }
00000a  4770              BX       lr
                  |L36.12|
00000c  2001              MOVS     r0,#1                 ;86
00000e  4770              BX       lr
;;;89     
                          ENDP
                  |L36.16|
                          DCD      0x40003000
                          AREA ||i.RCC_WaitConfig||, CODE, READONLY, ALIGN=2
                  RCC_WaitConfig PROC
;;;635     */
;;;636    void RCC_WaitConfig ( RCC_Wait_TypeDef RCC_Wait )
000000  b500              PUSH     {lr}
;;;637    {
000002  4603              MOV      r3,r0
;;;638        RCC_Unlock ( 0xFF );
000004  20ff              MOVS     r0,#0xff
000006  f7fffffe          BL       RCC_Unlock
;;;639        
;;;640        assert_param ( IS_RCC_Wait ( RCC_Wait ) );
;;;641    
;;;642        RCC->RCC_CFG0 &= ~RCC_CFG0_WAIT_Msk;
00000a  4905              LDR      r1,|L37.32|
00000c  694a              LDR      r2,[r1,#0x14]
00000e  2003              MOVS     r0,#3
000010  0300              LSLS     r0,r0,#12
000012  4382              BICS     r2,r2,r0
000014  614a              STR      r2,[r1,#0x14]
;;;643        RCC->RCC_CFG0 |= RCC_Wait;
000016  694a              LDR      r2,[r1,#0x14]
000018  431a              ORRS     r2,r2,r3
00001a  614a              STR      r2,[r1,#0x14]
;;;644    
;;;645    }
00001c  bd00              POP      {pc}
;;;646    /** @defgroup RCC_Group3 Peripheral clocks configuration functions
                          ENDP
00001e  0000              DCW      0x0000
                  |L37.32|
                          DCD      0x40003000
;*** Start embedded assembler ***
#line 1 "..\\FWLib\\SC32F1XXX_Lib\\src\\sc32f1xxx_rcc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_sc32f1xxx_rcc_c_49e27980____REV16|
#line 463 "..\\CMSIS\\cmsis_armcc.h"
|__asm___15_sc32f1xxx_rcc_c_49e27980____REV16| PROC
#line 464
 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_sc32f1xxx_rcc_c_49e27980____REVSH|
#line 478
|__asm___15_sc32f1xxx_rcc_c_49e27980____REVSH| PROC
#line 479
 revsh r0, r0
 bx lr
	ENDP
;*** End   embedded assembler ***
